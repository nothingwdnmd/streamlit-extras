{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A Python library with useful Streamlit extras","text":"<p>Welcome to the \ud83e\udea2 streamlit-extras documentation. If you want to give a special touch to your Streamlit apps, you're at the right place!</p> <p>This library includes &gt; 20 functional or visual additions to Streamlit that will make your life easier or your apps nicer. We call them extras and anyone's welcome to add their owns. See our contribution guide.</p> <p>\ud83d\udc48 Browse Extras in the left handside menu, and if you like them, go ahead and get started!</p> <p>Maintained by @arnaudmiribel &amp; @blackary.</p>"},{"location":"components/","title":"Streamlit Components","text":"<p>\ud83e\udea2 streamlit-extras is in fact... a Streamlit Component!</p>"},{"location":"components/#whats-a-streamlit-component","title":"What's a Streamlit component?","text":"<p>Components are third-party modules that extend what\u2019s possible with Streamlit.</p>"},{"location":"components/#show-me-more","title":"Show me more!","text":"<p>Visit the components gallery to discover even more components, and learn how to build your own using this great blog post by Zachary.</p>"},{"location":"contributing/","title":"Contributing your own extra","text":"<p>In this guide, you'll learn how to publish a new Streamlit extra, either from a new function or an existing package. Let's get started!</p>"},{"location":"contributing/#requirements","title":"Requirements","text":"<p>Set up linting to standardize your code by running <code>pre-commit install</code>, which will then check the formatting of the files you added. </p>"},{"location":"contributing/#case-1-from-a-new-function-not-yet-on-pypi","title":"Case 1: From a new function (not yet on PyPi)","text":"<ol> <li> <p>Create an empty directory for your extra in the <code>src/streamlit_extras</code> directory.</p> </li> <li> <p>Add a <code>__init__.py</code> file to provide metadata that will appear in our docs.</p> </li> </ol> <pre><code># extras/&lt;extra_name&gt;/__init__.py\nfrom .. import extra\n\n@extra  # this will register your function's extra\ndef my_main_function():\n    ...\n\ndef example():\n    ...\n\n__title__ = \"Great title!\"  # title of your extra! \ud83c\udfc6\n__desc__ = \"Great description\"  # description of your extra! \ud83d\udca1\n__icon__ = \"\ud83d\udd2d\"  # give your extra an icon! \ud83c\udf20\n__examples__ = [example]  # create some examples to show how cool your extra is! \ud83d\ude80\n__author__ = \"Eva Jensen\"\n__experimental_playground__ = False  # Optional\n</code></pre> <ol> <li> <p>To test it out, run <code>pip install -e .</code> in the <code>streamlit-extras</code> directory, and then <code>streamlit run gallery/streamlit_app.py</code> app.</p> </li> <li> <p>Submit a PR and share your extra with the world! \ud83c\udf89</p> </li> </ol>"},{"location":"contributing/#case-2-from-an-existing-package-already-in-pypi","title":"Case 2: From an existing package (already in PyPi)","text":"<p>Create an empty directory for your extra in the src/streamlit_extras directory.</p> <p>Add a init.py file and import your main function from your package.</p> <pre><code># extras/&lt;extra_name&gt;/__init__.py\n\nfrom my_package import my_main_function\nfrom .. import extra\n\nmy_main_function = extra(my_main_function)\n\ndef example():\n    ...\n\n__title__ = \"Great title!\"  # title of your extra! \ud83c\udfc6\n__desc__ = \"Great description\"  # description of your extra! \ud83d\udca1\n__icon__ = \"\ud83d\udd2d\"  # give your extra an icon! \ud83c\udf20\n__examples__ = [example]  # create some examples to show how cool your extra is! \ud83d\ude80\n__author__ = \"Eva Jensen\"\n__pypi_name__ = \"my-cool-package\"\n__package_name__ = \"my_package\"\n__github_repo__ = \"evajensen/my-repo\"  # Optional\n__streamlit_cloud_url__ = \"http://my-super-app.streamlitapp.com\"  # Optional\n__experimental_playground__ = False  # Optional\n</code></pre> <ol> <li> <p>Add your package to the list of dependencies in pyproject.toml.</p> </li> <li> <p>(Optional) You can add a \"featured-extra\" badge to your original README.md if you like!</p> </li> <li> <p>To check that your package has all the required fields, run <code>poetry run pytest</code> from the repository.</p> </li> <li> <p>Submit a PR and share your extra with the world! \ud83c\udf89</p> </li> </ol>"},{"location":"contributing/#help","title":"Help","text":"<p>If you are having troubles, create an issue or DM me on Twitter!</p>"},{"location":"getting_started/","title":"Getting started","text":"<p>As easy as...</p> <pre><code>pip install streamlit-extras\n</code></pre>"},{"location":"extras/add_vertical_space/","title":"\ud83d\udc7d\u00a0\u00a0Add Vertical Space","text":"<p>Submitted by Tyler Richards</p>"},{"location":"extras/add_vertical_space/#summary","title":"Summary","text":"<p>Add n lines of vertical space to your Streamlit app in one command</p>"},{"location":"extras/add_vertical_space/#functions","title":"Functions","text":""},{"location":"extras/add_vertical_space/#add_vertical_space","title":"<code>add_vertical_space</code>","text":"<p>Add vertical space to your Streamlit app.</p> <p>Parameters:</p> Name Type Description Default <code>num_lines</code> <code>int</code> <p>Height of the vertical space (given in number of lines). Defaults to 1.</p> <code>1</code> Source code in <code>src/streamlit_extras/add_vertical_space/__init__.py</code> <pre><code>@extra\ndef add_vertical_space(num_lines: int = 1) -&gt; None:\n    \"\"\"\n    Add vertical space to your Streamlit app.\n\n    Args:\n        num_lines (int, optional): Height of the vertical space (given in number of lines). Defaults to 1.\n    \"\"\"\n    for _ in range(num_lines):\n        st.write(\"\")  # This is just a way to do a line break!\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.add_vertical_space import add_vertical_space # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/add_vertical_space/#examples","title":"Examples","text":""},{"location":"extras/add_vertical_space/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    add_n_lines = st.slider(\"Add n vertical lines below this\", 1, 20, 5)\n    add_vertical_space(add_n_lines)\n    st.write(\"Here is text after the nth line!\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/","title":"\ud83d\udc78\u00a0\u00a0Altex","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/altex/#summary","title":"Summary","text":"<p>A simple wrapper on top of Altair to make Streamlit charts in an express API. If you're lazy and/or familiar with Altair, this is  probably a good fit! Inspired by plost and plotly-express.</p>"},{"location":"extras/altex/#functions","title":"Functions","text":""},{"location":"extras/altex/#_chart","title":"<code>_chart</code>","text":"<p>Create an Altair chart with a simple API. Supported charts include line, bar, point, area, histogram, sparkline, sparkbar, sparkarea.</p> <p>Parameters:</p> Name Type Description Default <code>mark_function</code> <code>str</code> <p>Altair mark function, example line/bar/point</p> required <code>data</code> <code>DataFrame</code> <p>Dataframe to use for the chart</p> required <code>x</code> <code>Union[X, str]</code> <p>Column for the x axis</p> required <code>y</code> <code>Union[Y, str]</code> <p>Column for the y axis</p> required <code>color</code> <code>Optional[Union[Color, str]]</code> <p>Color a specific group of your data. Defaults to None.</p> <code>None</code> <code>opacity</code> <code>Optional[Union[value, float]]</code> <p>Change opacity of marks. Defaults to None.</p> <code>None</code> <code>column</code> <code>Optional[Union[Column, str]]</code> <p>Groupby a specific column. Defaults to None.</p> <code>None</code> <code>rolling</code> <code>Optional[int]</code> <p>Rolling average window size. Defaults to None.</p> <code>None</code> <code>title</code> <code>Optional[str]</code> <p>Title of the chart. Defaults to None.</p> <code>None</code> <code>width</code> <code>Optional[int]</code> <p>Width of the chart. Defaults to None.</p> <code>None</code> <code>height</code> <code>Optional[int]</code> <p>Height of the chart. Defaults to None.</p> <code>None</code> <code>spark</code> <code>bool</code> <p>Whether or not to make spark chart, i.e. a chart without axes nor ticks nor legend. Defaults to False.</p> <code>False</code> <code>autoscale_y</code> <code>bool</code> <p>Whether or not to autoscale the y axis. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Chart</code> <p>alt.Chart: Altair chart</p> Source code in <code>src/streamlit_extras/altex/__init__.py</code> <pre><code>@extra\ndef _chart(\n    mark_function: str,\n    data: pd.DataFrame,\n    x: Union[alt.X, str],\n    y: Union[alt.Y, str],\n    color: Optional[Union[alt.Color, str]] = None,\n    opacity: Optional[Union[alt.value, float]] = None,\n    column: Optional[Union[alt.Column, str]] = None,\n    rolling: Optional[int] = None,\n    title: Optional[str] = None,\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    spark: bool = False,\n    autoscale_y: bool = False,\n) -&gt; alt.Chart:\n    \"\"\"Create an Altair chart with a simple API.\n    Supported charts include line, bar, point, area, histogram, sparkline, sparkbar, sparkarea.\n\n    Args:\n        mark_function (str): Altair mark function, example line/bar/point\n        data (pd.DataFrame): Dataframe to use for the chart\n        x (Union[alt.X, str]): Column for the x axis\n        y (Union[alt.Y, str]): Column for the y axis\n        color (Optional[Union[alt.Color, str]], optional): Color a specific group of your data. Defaults to None.\n        opacity (Optional[Union[alt.value, float]], optional): Change opacity of marks. Defaults to None.\n        column (Optional[Union[alt.Column, str]], optional): Groupby a specific column. Defaults to None.\n        rolling (Optional[int], optional): Rolling average window size. Defaults to None.\n        title (Optional[str], optional): Title of the chart. Defaults to None.\n        width (Optional[int], optional): Width of the chart. Defaults to None.\n        height (Optional[int], optional): Height of the chart. Defaults to None.\n        spark (bool, optional): Whether or not to make spark chart, i.e. a chart without axes nor ticks nor legend. Defaults to False.\n        autoscale_y (bool, optional): Whether or not to autoscale the y axis. Defaults to False.\n\n    Returns:\n        alt.Chart: Altair chart\n    \"\"\"\n\n    x_ = _get_shorthand(x)\n    y_ = _get_shorthand(y)\n    color_ = _get_shorthand(color)\n\n    tooltip_config = _drop_nones([x_, y_, color_])\n\n    chart_config = _drop_nones(\n        {\n            \"data\": data,\n            \"title\": title,\n            \"mark\": mark_function,\n            \"width\": width,\n            \"height\": height,\n        }\n    )\n\n    chart = alt.Chart(**chart_config)\n\n    if rolling is not None:\n        rolling_column = f\"{y_} ({rolling}-average)\"\n        y = f\"{rolling_column}:Q\"\n        transform_config = {\n            rolling_column: f\"mean({y_})\",\n            \"frame\": [-rolling, 0],\n            \"groupby\": [str(color)],\n        }\n        chart = chart.transform_window(**transform_config)\n\n    if spark:\n        chart = chart.configure_view(strokeWidth=0).configure_axis(\n            grid=False, domain=False\n        )\n        x_axis = _update_axis_config(x, alt.X, {\"axis\": None})\n        y_axis = _update_axis_config(y, alt.Y, {\"axis\": None})\n    else:\n        x_axis = x\n        y_axis = y\n\n    if autoscale_y:\n        y_axis = _update_axis_config(y_axis, alt.Y, {\"scale\": alt.Scale(zero=False)})\n\n    encode_config = _drop_nones(\n        {\n            \"x\": x_axis,\n            \"y\": y_axis,\n            \"color\": color,\n            \"tooltip\": tooltip_config,\n            \"opacity\": alt.value(opacity) if isinstance(opacity, float) else opacity,\n            \"column\": column,\n        }\n    )\n\n    chart = chart.encode(**encode_config)\n\n    return chart\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.altex import _chart # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/altex/#scatter_chart","title":"<code>scatter_chart</code>","text":"Source code in <code>src/streamlit_extras/altex/__init__.py</code> <pre><code>@extra\ndef scatter_chart(**kwargs):\n    return chart(mark_function=\"point\", __name__=\"scatter_chart\", **kwargs)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.altex import scatter_chart # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/altex/#examples","title":"Examples","text":""},{"location":"extras/altex/#example_line","title":"<code>example_line</code>","text":"<pre><code>@cache_data\ndef example_line():\n    stocks = get_stocks_data()\n\n    line_chart(\n        data=stocks.query(\"symbol == 'GOOG'\"),\n        x=\"date\",\n        y=\"price\",\n        title=\"A beautiful simple line chart\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_multi_line","title":"<code>example_multi_line</code>","text":"<pre><code>@cache_data\ndef example_multi_line():\n    stocks = get_stocks_data()\n    line_chart(\n        data=stocks,\n        x=\"date\",\n        y=\"price\",\n        color=\"symbol\",\n        title=\"A beautiful multi line chart\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_bar","title":"<code>example_bar</code>","text":"<pre><code>@cache_data\ndef example_bar():\n    stocks = get_stocks_data()\n    bar_chart(\n        data=stocks.query(\"symbol == 'GOOG'\"),\n        x=\"date\",\n        y=\"price\",\n        title=\"A beautiful bar chart\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_hist","title":"<code>example_hist</code>","text":"<pre><code>@cache_data\ndef example_hist():\n    stocks = get_stocks_data()\n    hist_chart(\n        data=stocks.assign(price=stocks.price.round(0)),\n        x=\"price\",\n        title=\"A beautiful histogram\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_scatter","title":"<code>example_scatter</code>","text":"<pre><code>@cache_data\ndef example_scatter():\n    weather = get_weather_data()\n    scatter_chart(\n        data=weather,\n        x=alt.X(\"wind:Q\", title=\"Custom X title\"),\n        y=alt.Y(\"temp_min:Q\", title=\"Custom Y title\"),\n        title=\"A beautiful scatter chart\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_sparkline","title":"<code>example_sparkline</code>","text":"<pre><code>@cache_data\ndef example_sparkline():\n    stocks = get_stocks_data()\n    sparkline_chart(\n        data=stocks.query(\"symbol == 'GOOG'\"),\n        x=\"date\",\n        y=\"price\",\n        title=\"A beautiful sparkline chart\",\n        rolling=7,\n        height=150,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_minisparklines","title":"<code>example_minisparklines</code>","text":"<pre><code>@cache_data\ndef example_minisparklines():\n    stocks = get_stocks_data()\n\n    left, middle, right = st.columns(3)\n    with left:\n        data = stocks.query(\"symbol == 'GOOG'\")\n        st.metric(\"GOOG\", int(data[\"price\"].mean()))\n        sparkline_chart(\n            data=data,\n            x=\"date\",\n            y=\"price:Q\",\n            height=80,\n            autoscale_y=True,\n        )\n    with middle:\n        data = stocks.query(\"symbol == 'MSFT'\")\n        st.metric(\"MSFT\", int(data[\"price\"].mean()))\n        sparkline_chart(\n            data=data,\n            x=\"date\",\n            y=\"price:Q\",\n            height=80,\n            autoscale_y=True,\n        )\n    with right:\n        data = stocks.query(\"symbol == 'AAPL'\")\n        st.metric(\"AAPL\", int(data[\"price\"].mean()))\n        sparkline_chart(\n            data=data,\n            x=\"date\",\n            y=\"price:Q\",\n            height=80,\n            autoscale_y=True,\n        )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_sparkbar","title":"<code>example_sparkbar</code>","text":"<pre><code>@cache_data\ndef example_sparkbar():\n    stocks = get_stocks_data()\n    sparkbar_chart(\n        data=stocks.query(\"symbol == 'GOOG'\"),\n        x=\"date\",\n        y=\"price\",\n        title=\"A beautiful sparkbar chart\",\n        height=150,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_sparkarea","title":"<code>example_sparkarea</code>","text":"<pre><code>@cache_data\ndef example_sparkarea():\n    random_data = get_random_data()\n    df = pd.melt(\n        random_data,\n        id_vars=\"index\",\n        value_vars=list(\"abcdefg\"),\n    )\n\n    sparkarea_chart(\n        data=df,\n        x=\"index\",\n        y=\"value\",\n        color=alt.Color(\"variable\", legend=None),\n        title=\"A beautiful (also probably useless) sparkarea chart\",\n        opacity=alt.value(0.6),\n        height=200,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_hist_time","title":"<code>example_hist_time</code>","text":"<pre><code>@cache_data\ndef example_hist_time():\n    weather = get_weather_data()\n    hist_chart(\n        data=weather,\n        x=\"week(date):T\",\n        y=\"day(date):T\",\n        color=alt.Color(\n            \"median(temp_max):Q\",\n            legend=None,\n        ),\n        title=\"A beautiful time hist chart\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_bar_sorted","title":"<code>example_bar_sorted</code>","text":"<pre><code>@cache_data\ndef example_bar_sorted():\n    weather = get_weather_data()\n    bar_chart(\n        data=weather.sort_values(by=\"temp_max\", ascending=False).head(25),\n        x=alt.X(\"date\", sort=\"-y\"),\n        y=alt.Y(\"temp_max:Q\"),\n        title=\"A beautiful sorted-by-value bar chart\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_bar_normalized","title":"<code>example_bar_normalized</code>","text":"<pre><code>@cache_data\ndef example_bar_normalized():\n    barley = get_barley_data()\n    bar_chart(\n        data=barley,\n        x=alt.X(\"variety:N\", title=\"Variety\"),\n        y=alt.Y(\"sum(yield):Q\", stack=\"normalize\"),\n        color=\"site:N\",\n        title=\"A beautiful normalized stacked bar chart\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_bar_grouped","title":"<code>example_bar_grouped</code>","text":"<pre><code>@cache_data\ndef example_bar_grouped():\n    barley = get_barley_data()\n    bar_chart(\n        data=barley,\n        x=\"year:O\",\n        y=\"sum(yield):Q\",\n        color=\"year:N\",\n        column=\"site:N\",\n        title=\"A beautiful grouped bar charts\",\n        width=90,\n        use_container_width=False,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_bar_horizontal","title":"<code>example_bar_horizontal</code>","text":"<pre><code>@cache_data\ndef example_bar_horizontal():\n    weather = get_weather_data()\n    bar_chart(\n        data=weather.head(15),\n        x=\"temp_max:Q\",\n        y=alt.Y(\"date:O\", title=\"Temperature\"),\n        title=\"A beautiful horizontal bar chart\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_bar_log","title":"<code>example_bar_log</code>","text":"<pre><code>@cache_data\ndef example_bar_log():\n    weather = get_weather_data()\n    bar_chart(\n        data=weather,\n        x=alt.X(\"temp_max:Q\", title=\"Temperature\"),\n        y=alt.Y(\n            \"count()\",\n            title=\"Count of records\",\n            scale=alt.Scale(type=\"symlog\"),\n        ),\n        title=\"A beautiful histogram... with log scale\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_scatter_opacity","title":"<code>example_scatter_opacity</code>","text":"<pre><code>@cache_data\ndef example_scatter_opacity():\n    weather = get_weather_data()\n    scatter_chart(\n        data=weather,\n        x=alt.X(\"wind:Q\", title=\"Custom X title\"),\n        y=alt.Y(\"temp_min:Q\", title=\"Custom Y title\"),\n        title=\"A beautiful scatter chart with custom opacity\",\n        opacity=0.2,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/altex/#example_bar_normalized_custom","title":"<code>example_bar_normalized_custom</code>","text":"<pre><code>@cache_data\ndef example_bar_normalized_custom():\n    barley = get_barley_data()\n    bar_chart(\n        data=barley,\n        x=alt.X(\"variety\", title=\"Variety\"),\n        y=\"sum(yield)\",\n        color=alt.Color(\"site\", scale=alt.Scale(scheme=\"lighttealblue\"), legend=None),\n        title=\"A beautiful stacked bar chart (without legend, custom colors)\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/annotated_text/","title":"\ud83d\udd8a\ufe0f\u00a0\u00a0Annotated text","text":"<p>Submitted by tvst</p>"},{"location":"extras/annotated_text/#summary","title":"Summary","text":"<p>A simple way to display annotated text in Streamlit apps</p>"},{"location":"extras/annotated_text/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/annotated_text/#examples","title":"Examples","text":""},{"location":"extras/annotated_text/#example_1","title":"<code>example_1</code>","text":"<pre><code>def example_1():\n    from annotated_text import annotated_text\n\n    annotated_text(\n        \"This \",\n        (\"is\", \"verb\", \"#8ef\"),\n        \" some \",\n        (\"annotated\", \"adj\", \"#faa\"),\n        (\"text\", \"noun\", \"#afa\"),\n        \" for those of \",\n        (\"you\", \"pronoun\", \"#fea\"),\n        \" who \",\n        (\"like\", \"verb\", \"#8ef\"),\n        \" this sort of \",\n        (\"thing\", \"noun\", \"#afa\"),\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/annotated_text/#example_2","title":"<code>example_2</code>","text":"<pre><code>def example_2():\n    from annotated_text import annotated_text, annotation\n\n    annotated_text(\n        \"Hello \",\n        annotation(\"world!\", \"noun\", color=\"#8ef\", border=\"1px dashed red\"),\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/app_logo/","title":"\ud83d\udc31\u00a0\u00a0App logo","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/app_logo/#summary","title":"Summary","text":"<p>Add a logo on top of the navigation bar of a multipage app</p>"},{"location":"extras/app_logo/#functions","title":"Functions","text":""},{"location":"extras/app_logo/#add_logo","title":"<code>add_logo</code>","text":"<p>Add a logo (from logo_url) on the top of the navigation page of a multipage app. Taken from the Streamlit forum The url can either be a url to the image, or a local path to the image.</p> <p>Parameters:</p> Name Type Description Default <code>logo_url</code> <code>str</code> <p>URL/local path of the logo</p> required Source code in <code>src/streamlit_extras/app_logo/__init__.py</code> <pre><code>@extra\ndef add_logo(logo_url: str, height: int = 120):\n    \"\"\"Add a logo (from logo_url) on the top of the navigation page of a multipage app.\n    Taken from [the Streamlit forum](https://discuss.streamlit.io/t/put-logo-and-title-above-on-top-of-page-navigation-in-sidebar-of-multipage-app/28213/6)\n    The url can either be a url to the image, or a local path to the image.\n\n    Args:\n        logo_url (str): URL/local path of the logo\n    \"\"\"\n\n    if validators.url(logo_url) is True:\n        logo = f\"url({logo_url})\"\n    else:\n        logo = f\"url(data:image/png;base64,{base64.b64encode(Path(logo_url).read_bytes()).decode()})\"\n\n    st.markdown(\n        f\"\"\"\n        &lt;style&gt;\n            [data-testid=\"stSidebarNav\"] {{\n                background-image: {logo};\n                background-repeat: no-repeat;\n                padding-top: {height - 40}px;\n                background-position: 20px 20px;\n            }}\n        &lt;/style&gt;\n        \"\"\",\n        unsafe_allow_html=True,\n    )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.app_logo import add_logo # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/app_logo/#examples","title":"Examples","text":""},{"location":"extras/app_logo/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    if st.checkbox(\"Use url\", value=True):\n        add_logo(\"http://placekitten.com/120/120\")\n    else:\n        add_logo(\"gallery/kitty.jpeg\", height=300)\n    st.write(\"\ud83d\udc48 Check out the cat in the nav-bar!\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/badges/","title":"\ud83c\udff7\ufe0f\u00a0\u00a0Badges","text":"<p>Submitted by Arnaud Miribel, ShruAgarwal</p>"},{"location":"extras/badges/#summary","title":"Summary","text":"<p>Create custom badges (e.g. PyPI, Streamlit Cloud, GitHub, Twitter, Buy Me a Coffee)</p>"},{"location":"extras/badges/#functions","title":"Functions","text":""},{"location":"extras/badges/#badge","title":"<code>badge</code>","text":"<p>Easily create a visual badge for PyPI, GitHub, Streamlit Cloud or other social platforms.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>Badge type. Can be \"pypi\", \"github\", \"streamlit\", \"twitter\" or \"buymeacoffee\"</p> required <code>name</code> <code>str</code> <p>Name of the PyPI package, GitHub repository, Twitter's username or BuyMeaCoffee Creator's page name.         Mandatory when using type=\"pypi\", type=\"twitter\" &amp; type=\"buymeacoffee\"</p> <code>None</code> <code>url</code> <code>str</code> <p>URL of the Streamlit Cloud app. Mandatory when using type=\"streamlit\"</p> <code>None</code> Source code in <code>src/streamlit_extras/badges/__init__.py</code> <pre><code>@extra\ndef badge(type: _SUPPORTED_TYPES, name: str | None = None, url: str | None = None):\n    \"\"\"Easily create a visual badge for PyPI, GitHub, Streamlit Cloud or other social platforms.\n\n    Args:\n        type (str): Badge type. Can be \"pypi\", \"github\", \"streamlit\", \"twitter\" or \"buymeacoffee\"\n        name (str): Name of the PyPI package, GitHub repository, Twitter's username or BuyMeaCoffee Creator's page name.\n                    Mandatory when using type=\"pypi\", type=\"twitter\" &amp; type=\"buymeacoffee\"\n        url (str): URL of the Streamlit Cloud app. Mandatory when using type=\"streamlit\"\n    \"\"\"\n\n    assert type, \"Type must be given!\"\n\n    assert type in get_args(_SUPPORTED_TYPES), (\n        f\"Input type '{type}' is not supported! Supported types are\"\n        f\" {get_args(_SUPPORTED_TYPES)}\"\n    )\n\n    badge_html = None\n\n    if type == \"pypi\":\n        assert name, \"You must give a valid PyPI package name!\"\n        badge_html = str(\n            a(href=f\"https://pypi.org/project/{name}\")(\n                img(src=f\"https://badge.fury.io/py/{name}.svg\")\n            )\n        )\n\n    if type == \"streamlit\":\n        assert url, \"You must provide a valid URL for the Streamlit app\"\n        badge_html = str(\n            a(href=url)(\n                img(\n                    src=\"https://static.streamlit.io/badges/streamlit_badge_black_white.svg\"\n                )\n            )\n        )\n\n    if type == \"github\":\n        assert name, (\n            \"You must give a valid GitHub repository name! Something like\"\n            \" 'author/name'\"\n        )\n        badge_html = str(\n            a(href=f\"https://github.com/{name}\")(\n                img(\n                    src=f\"https://img.shields.io/github/stars/{name}.svg?style=social&amp;label=Star&amp;maxAge=2592000\"\n                )\n            )\n        )\n\n    if type == \"twitter\":\n        assert name, \"You must provide a valid twitter username\"\n        badge_html = str(\n            a(href=f\"https://twitter.com/intent/follow?screen_name={name}\")(\n                img(\n                    src=f\"https://img.shields.io/twitter/follow/{name}?style=social&amp;logo=twitter\"\n                )\n            )\n        )\n\n    if type == \"buymeacoffee\":\n        assert name, \"You must provide a valid Buy-Me-a-Coffee page username\"\n        badge_html = str(\n            a(href=f\"https://www.buymeacoffee.com/{name}\")(\n                img(\n                    src=\"https://img.shields.io/badge/Buy%20me%20a%20coffee--yellow.svg?logo=buy-me-a-coffee&amp;logoColor=orange&amp;style=social\"\n                )\n            )\n        )\n\n    if badge_html is not None:\n        st.write(badge_html, unsafe_allow_html=True)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.badges import badge # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/badges/#examples","title":"Examples","text":""},{"location":"extras/badges/#example_pypi","title":"<code>example_pypi</code>","text":"<pre><code>def example_pypi():\n    badge(type=\"pypi\", name=\"plost\")\n    badge(type=\"pypi\", name=\"streamlit\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/badges/#example_streamlit","title":"<code>example_streamlit</code>","text":"<pre><code>def example_streamlit():\n    badge(type=\"streamlit\", url=\"https://plost.streamlitapp.com\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/badges/#example_github","title":"<code>example_github</code>","text":"<pre><code>def example_github():\n    badge(type=\"github\", name=\"streamlit/streamlit\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/badges/#example_twitter","title":"<code>example_twitter</code>","text":"<pre><code>def example_twitter():\n    badge(type=\"twitter\", name=\"streamlit\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/badges/#example_buymeacoffee","title":"<code>example_buymeacoffee</code>","text":"<pre><code>def example_buymeacoffee():\n    badge(type=\"buymeacoffee\", name=\"andfanilo\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/buy_me_a_coffee/","title":"\u2615\u00a0\u00a0Buy Me a Coffee Button","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/buy_me_a_coffee/#summary","title":"Summary","text":"<p>Adds a floating button which links to your Buy Me a Coffee page</p>"},{"location":"extras/buy_me_a_coffee/#functions","title":"Functions","text":""},{"location":"extras/buy_me_a_coffee/#button","title":"<code>button</code>","text":"<p>Display a button which links to your Buy Me a Coffee page.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Buy Me a Coffee username</p> required <code>floating</code> <code>bool</code> <p>Whether the button should be floating. Defaults to True.</p> <code>True</code> <code>text</code> <code>str</code> <p>Text to show on the button. Defaults to \"Buy me a coffee\".</p> <code>'Buy me a coffee'</code> <code>emoji</code> <code>str</code> <p>Emoji to show on the button. Defaults to \"\".</p> <code>''</code> <code>bg_color</code> <code>str</code> <p>Background of the button. Defaults to \"#FFDD00\".</p> <code>'#FFDD00'</code> <code>font</code> <code>Font</code> <p>Font of the button. Defaults to \"Cookie\".</p> <code>'Cookie'</code> <code>font_color</code> <code>str</code> <p>Font color. Defaults to \"#000000\".</p> <code>'#000000'</code> <code>coffee_color</code> <code>str</code> <p>Coffee icon color. Defaults to \"#000000\".</p> <code>'#000000'</code> <code>width</code> <code>int</code> <p>Width of the button. Defaults to 220.</p> <code>220</code> Source code in <code>src/streamlit_extras/buy_me_a_coffee/__init__.py</code> <pre><code>@extra\ndef button(\n    username: str,\n    floating: bool = True,\n    text: str = \"Buy me a coffee\",\n    emoji: str = \"\",\n    bg_color: str = \"#FFDD00\",\n    font: Font = \"Cookie\",\n    font_color: str = \"#000000\",\n    coffee_color: str = \"#000000\",\n    width: int = 220,\n):\n    \"\"\"\n    Display a button which links to your Buy Me a Coffee page.\n\n    Args:\n        username (str): Buy Me a Coffee username\n        floating (bool, optional): Whether the button should be floating. Defaults to True.\n        text (str, optional): Text to show on the button. Defaults to \"Buy me a coffee\".\n        emoji (str, optional): Emoji to show on the button. Defaults to \"\".\n        bg_color (str, optional): Background of the button. Defaults to \"#FFDD00\".\n        font (Font, optional): Font of the button. Defaults to \"Cookie\".\n        font_color (str, optional): Font color. Defaults to \"#000000\".\n        coffee_color (str, optional): Coffee icon color. Defaults to \"#000000\".\n        width (int, optional): Width of the button. Defaults to 220.\n    \"\"\" \"\"\"\"\"\"\n    button = f\"\"\"\n        &lt;script type=\"text/javascript\"\n            src=\"https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js\"\n            data-name=\"bmc-button\"\n            data-slug=\"{username}\"\n            data-color=\"{bg_color}\"\n            data-emoji=\"{emoji}\"\n            data-font=\"{font}\"\n            data-text=\"{text}\"\n            data-outline-color=\"#000000\"\n            data-font-color=\"{font_color}\"\n            data-coffee-color=\"{coffee_color}\" &gt;\n        &lt;/script&gt;\n    \"\"\"\n\n    html(button, height=70, width=width)\n\n    if floating:\n        st.markdown(\n            f\"\"\"\n            &lt;style&gt;\n                iframe[width=\"{width}\"] {{\n                    position: fixed;\n                    bottom: 60px;\n                    right: 40px;\n                }}\n            &lt;/style&gt;\n            \"\"\",\n            unsafe_allow_html=True,\n        )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.buy_me_a_coffee import button # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/buy_me_a_coffee/#examples","title":"Examples","text":""},{"location":"extras/buy_me_a_coffee/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    button(username=\"fake-username\", floating=False, width=221)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/camera_input_live/","title":"\ud83d\udcf8\u00a0\u00a0Camera input live","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/camera_input_live/#summary","title":"Summary","text":"<p>A camera input that updates a variable number of seconds</p>"},{"location":"extras/camera_input_live/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/camera_input_live/#examples","title":"Examples","text":""},{"location":"extras/camera_input_live/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    st.write(\"# See a new image every second\")\n    controls = st.checkbox(\"Show controls\")\n    image = camera_input_live(show_controls=controls)\n    if image is not None:\n        st.image(image)\n</code></pre>"},{"location":"extras/capture/","title":"\ud83e\udd45\u00a0\u00a0Capture","text":"<p>Submitted by Alexander Martin</p>"},{"location":"extras/capture/#summary","title":"Summary","text":"<p>Capture utility extensions for the standard streamlit library</p>"},{"location":"extras/capture/#functions","title":"Functions","text":""},{"location":"extras/capture/#redirect","title":"<code>redirect</code>","text":"<p>Redirect STDOUT and STDERR to streamlit functions.</p> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef redirect(src: TextIO, dst: Callable, terminator: str = \"\\n\"):\n    \"\"\"Redirect STDOUT and STDERR to streamlit functions.\"\"\"\n    with StringIO() as buffer:\n\n        def new_write(b):\n            buffer.write(b + terminator)\n            dst(buffer.getvalue())\n\n        # Test if we are actually running in the streamlit script thread before we redirect\n        if get_script_run_ctx() is not None:\n            old_write = src.write\n            try:\n                src.write = new_write  # type: ignore\n                yield\n            finally:\n                src.write = old_write  # type: ignore\n        else:\n            yield\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.capture import redirect # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/capture/#stdout","title":"<code>stdout</code>","text":"<pre><code>Capture STDOUT and redirect it to a callable `dst`\n\nArgs:\n    dst (Callable): A function callable with a single string argument. The entire captured contents will be\n        passed to this function every time a new string is written. It is designed to be compatible with\n        st.empty().* functions as callbacks.\n    terminator (str, optional): If a `terminator` is specified, it is added onto each call to stdout.write/print.\n        This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n        If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string. Defaults to \"\n</code></pre> <p>\".</p> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef stdout(dst: Callable, terminator: str = \"\\n\"):\n    \"\"\"\n    Capture STDOUT and redirect it to a callable `dst`\n\n    Args:\n        dst (Callable): A function callable with a single string argument. The entire captured contents will be\n            passed to this function every time a new string is written. It is designed to be compatible with\n            st.empty().* functions as callbacks.\n        terminator (str, optional): If a `terminator` is specified, it is added onto each call to stdout.write/print.\n            This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n            If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string. Defaults to \"\\n\".\n    \"\"\"\n    with redirect(sys.stdout, dst, terminator):\n        yield\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.capture import stdout # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/capture/#stderr","title":"<code>stderr</code>","text":"<p>Capture STDERR and redirect it to a callable <code>dst</code>.</p> <p>Parameters:</p> Name Type Description Default <code>dst</code> <code>callable[str]</code> <p>A funciton callable with a single string argument. The entire captured contents will be passed to this function every time a new string is written. It is designed to be compatible with st.empty().* functions as callbacks.</p> required <code>terminator</code> <code>(optional, str)</code> <p>If a <code>terminator</code> is specified, it is added onto each call to stdout.write/print. This defaults to a newline which causes them to display on separate lines within an st.empty.write <code>dst. If using this with st.empty.code as</code>dst<code>it is recommended to set</code>terminator` to empty string.</p> <code>'\\n'</code> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef stderr(dst: Callable, terminator=\"\\n\"):\n    \"\"\"\n    Capture STDERR and redirect it to a callable `dst`.\n\n    Args:\n        dst (callable[str]): A funciton callable with a single string argument. The entire captured contents will be\n            passed to this function every time a new string is written. It is designed to be compatible with\n            st.empty().* functions as callbacks.\n        terminator (optional, str): If a `terminator` is specified, it is added onto each call to stdout.write/print.\n            This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n            If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string.\n    \"\"\"\n    with redirect(sys.stderr, dst, terminator):\n        yield\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.capture import stderr # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/capture/#logcapture","title":"<code>logcapture</code>","text":"<p>Redirect logging to a streamlit function call <code>dst</code>.</p> <p>Parameters:</p> Name Type Description Default <code>dst</code> <code>callable[str]</code> <p>A function callable with a single string argument. The entire log contents will be passed to this function every time a log is written. It is designed to be compatible with st.empty().* functions as callbacks.</p> required <code>terminator</code> <code>(optional, str)</code> <p>If a <code>terminator</code> is specified, it is added onto the end of each log. This defaults to a newline which causes them to display on separate lines within an st.empty.write <code>dst. If using this with st.empty.code as</code>dst<code>it is recommended to set</code>terminator` to empty string.</p> <code>'\\n'</code> <code>from_logger</code> <code>(optional, Logger or logger)</code> <p>The logger from which logs will be captured. Defaults to <code>logging.root</code>.</p> <code>None</code> <code>formatter</code> <code>(optional, Formatter)</code> <p>If specified, the specified formatter will be added to the logging handler to control how logs are displayed.</p> <code>None</code> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef logcapture(\n    dst: Callable,\n    terminator: str = \"\\n\",\n    from_logger: logging.Logger | None = None,\n    formatter: logging.Formatter | None = None,\n):\n    \"\"\"\n    Redirect logging to a streamlit function call `dst`.\n\n    Args:\n        dst (callable[str]): A function callable with a single string argument. The entire log contents will be\n            passed to this function every time a log is written. It is designed to be compatible with st.empty().*\n            functions as callbacks.\n        terminator (optional, str): If a `terminator` is specified, it is added onto the end of each log.\n            This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n            If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string.\n        from_logger (optional, logging.Logger or loguru.logger): The logger from which logs will be captured.\n            Defaults to `logging.root`.\n        formatter (optional, logging.Formatter): If specified, the specified formatter will be added to the logging\n            handler to control how logs are displayed.\n    \"\"\"\n\n    if not from_logger:\n        from_logger = logging.getLogger()  # root logger\n\n    # Special-case loguru\n    using_loguru = (\n        \"loguru\" in sys.modules and sys.modules[\"loguru\"].logger is from_logger\n    )\n\n    with StringIO() as buffer:\n        new_handler = StreamlitLoggingHandler(buffer)\n        new_handler.set_callback(dst)\n        new_handler.terminator = terminator\n        if formatter:\n            new_handler.setFormatter(formatter)\n        elif using_loguru:\n            pass\n        else:\n            new_handler.setFormatter(\n                logging.Formatter(\n                    \"%(asctime)s - %(levelname)s %(message)s\",\n                    datefmt=\"%m/%d/%Y %I:%M:%S %p\",\n                )\n            )\n        handler_id = None\n        if using_loguru:\n            handler_id = from_logger.add(new_handler)  # type: ignore\n        else:\n            from_logger.addHandler(new_handler)\n        try:\n            yield\n        finally:\n            if using_loguru:\n                from_logger.remove(handler_id)  # type: ignore\n            else:\n                from_logger.removeHandler(new_handler)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.capture import logcapture # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/capture/#examples","title":"Examples","text":""},{"location":"extras/capture/#example_stdout","title":"<code>example_stdout</code>","text":"<pre><code>def example_stdout():\n    output = st.empty()\n    with stdout(output.code, terminator=\"\"):\n        print(\"This is some captured stdout\")\n        print(\"How about that, Isn't it great?\")\n        if st.button(\"Click to print more\"):\n            print(\"You added another line!\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/capture/#example_stderr","title":"<code>example_stderr</code>","text":"<pre><code>def example_stderr():\n    output = st.empty()\n    with stderr(output.code, terminator=\"\"):\n        print(\"This is some captured stderr\", file=sys.stderr)\n        print(\n            \"For this example, though, there aren't any problems...yet\", file=sys.stderr\n        )\n        if st.button(\"Throw an error!\"):\n            print(\"ERROR: Task failed successfully\", file=sys.stderr)\n            print(\"Psst....stdout isn't captured here\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/capture/#example_logcapture","title":"<code>example_logcapture</code>","text":"<pre><code>def example_logcapture():\n    logger = logging.getLogger(\"examplelogger\")\n    logger.setLevel(\"DEBUG\")\n    with logcapture(st.empty().code, from_logger=logger):\n        logger.error(\"Roses are red\")\n        logger.info(\"Violets are blue\")\n        logger.warning(\"This warning is yellow\")\n        logger.debug(\"Your code is broke, too\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/card/","title":"\ud83d\udcb3\ufe0f\u00a0\u00a0Card","text":"<p>Submitted by Gamliel Cohen"},{"location":"extras/card/#summary","title":"Summary","text":"<p>Streamlit Component, for a UI card</p>"},{"location":"extras/card/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/card/#examples","title":"Examples","text":""},{"location":"extras/card/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    card(\n        title=\"Hello World!\",\n        text=\"Some description\",\n        image=\"http://placekitten.com/300/250\",\n        url=\"https://www.google.com\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/chart_annotations/","title":"\u2b07\u00a0\u00a0Chart annotations","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/chart_annotations/#summary","title":"Summary","text":"<p>Add annotations to specific timestamps in your time series in Altair!</p>"},{"location":"extras/chart_annotations/#functions","title":"Functions","text":""},{"location":"extras/chart_annotations/#get_annotations_chart","title":"<code>get_annotations_chart</code>","text":"<p>Creates an Altair Chart with annotation markers on the horizontal axis. Useful to highlight certain events on top of another time series Altair Chart. More here https://share.streamlit.io/streamlit/example-app-time-series-annotation/main</p> <p>Parameters:</p> Name Type Description Default <code>annotations</code> <code>Iterable[Tuple]</code> <p>Iterable of annotations defined by tuples with date and annotation.</p> required <code>y</code> <code>float</code> <p>Height at which the annotation marker should be. Defaults to 0.</p> <code>0</code> <code>min_date</code> <code>str</code> <p>Only annotations older than min_date will be displayed. Defaults to None.</p> <code>None</code> <code>max_date</code> <code>str</code> <p>Only annotations more recent than max_date will be displayed. Defaults to None.</p> <code>None</code> <code>marker</code> <code>str</code> <p>Marker to be used to indicate there is an annotation. Defaults to \"\u2b07\".</p> <code>'\u2b07'</code> <code>marker_size</code> <code>float</code> <p>Size of the marker (font size). Defaults to 20.</p> <code>20</code> <code>marker_offset_x</code> <code>float</code> <p>Horizontal offset. Defaults to 0.</p> <code>0</code> <code>market_offset_y</code> <code>float</code> <p>Vertical offset. Defaults to -10.</p> <code>-10</code> <code>marker_align</code> <code>str</code> <p>Text-align property of the marker (\"left\", \"right\", \"center\"). Defaults to \"center\".</p> <code>'center'</code> <p>Returns:</p> Type Description <code>Chart</code> <p>alt.Chart: Altair Chart with annotation markers on the horizontal axis</p> Source code in <code>src/streamlit_extras/chart_annotations/__init__.py</code> <pre><code>@extra\ndef get_annotations_chart(\n    annotations: Iterable[Tuple],\n    y: float = 0,\n    min_date: str | None = None,\n    max_date: str | None = None,\n    marker: str = \"\u2b07\",\n    marker_size: float = 20,\n    marker_offset_x: float = 0,\n    market_offset_y: float = -10,\n    marker_align: str = \"center\",\n) -&gt; alt.Chart:\n    \"\"\"\n    Creates an Altair Chart with annotation markers on the horizontal axis.\n    Useful to highlight certain events on top of another time series Altair Chart.\n    More here https://share.streamlit.io/streamlit/example-app-time-series-annotation/main\n\n    Args:\n        annotations (Iterable[Tuple]): Iterable of annotations defined by tuples with date and annotation.\n        y (float, optional): Height at which the annotation marker should be. Defaults to 0.\n        min_date (str, optional): Only annotations older than min_date will be displayed. Defaults to None.\n        max_date (str, optional): Only annotations more recent than max_date will be displayed. Defaults to None.\n        marker (str, optional): Marker to be used to indicate there is an annotation. Defaults to \"\u2b07\".\n        marker_size (float, optional): Size of the marker (font size). Defaults to 20.\n        marker_offset_x (float, optional): Horizontal offset. Defaults to 0.\n        market_offset_y (float, optional): Vertical offset. Defaults to -10.\n        marker_align (str, optional): Text-align property of the marker (\"left\", \"right\", \"center\"). Defaults to \"center\".\n\n    Returns:\n        alt.Chart: Altair Chart with annotation markers on the horizontal axis\n    \"\"\"\n\n    # Make a DataFrame for annotations\n    annotations_df = pd.DataFrame(\n        annotations,\n        columns=[\"date\", \"annotation\"],\n    )\n\n    annotations_df.date = pd.to_datetime(annotations_df.date)\n    annotations_df[\"y\"] = y\n    if min_date:\n        annotations_df = annotations_df[annotations_df.date.gt(min_date)]\n    if max_date:\n        annotations_df = annotations_df[annotations_df.date.lt(max_date)]\n\n    encode_params = {\"x\": \"date:T\", \"y\": alt.Y(\"y:Q\"), \"tooltip\": \"annotation\"}\n\n    if \"url\" in annotations_df.columns:\n        encode_params[\"href\"] = \"url\"\n\n    annotations_chart = (\n        alt.Chart(annotations_df)\n        .mark_text(\n            size=marker_size,\n            text=marker,\n            dy=market_offset_y,\n            dx=marker_offset_x,\n            align=marker_align,\n            color=\"black\",\n        )\n        .encode(**encode_params)\n    )\n\n    return annotations_chart\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.chart_annotations import get_annotations_chart # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/chart_annotations/#examples","title":"Examples","text":""},{"location":"extras/chart_annotations/#example","title":"<code>example</code>","text":"<pre><code>def example() -&gt; None:\n    data: pd.DataFrame = get_data()\n    chart: alt.TopLevelMixin = get_chart(data=data)\n\n    chart += get_annotations_chart(\n        annotations=[\n            (\"Mar 01, 2008\", \"Pretty good day for GOOG\"),\n            (\"Dec 01, 2007\", \"Something's going wrong for GOOG &amp; AAPL\"),\n            (\"Nov 01, 2008\", \"Market starts again thanks to...\"),\n            (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),\n        ],\n    )\n\n    st.altair_chart(chart, use_container_width=True)  # type: ignore\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/chart_container/","title":"\ud83d\uddbc\ufe0f\u00a0\u00a0Chart container","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/chart_container/#summary","title":"Summary","text":"<p>Embed your chart in a nice tabs container to let viewers explore and export its underlying data.</p>"},{"location":"extras/chart_container/#functions","title":"Functions","text":""},{"location":"extras/chart_container/#chart_container","title":"<code>chart_container</code>","text":"<p>Embed chart in a (chart, data, export, explore) tabs container to let the viewer explore and export its underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dataframe used in the dataframe tab.</p> required <code>tabs</code> <code>Sequence</code> <p>Tab labels. Defaults to (\"Chart \ud83d\udcc8\", \"Dataframe \ud83d\udcc4\", \"Export \ud83d\udcc1\").</p> <code>('Chart \ud83d\udcc8', 'Dataframe \ud83d\udcc4', 'Export \ud83d\udcc1')</code> <code>export_formats</code> <code>Sequence</code> <p>Export file formats. Defaults to (\"CSV\", \"Parquet\")</p> <code>_SUPPORTED_EXPORT_KEYS</code> Source code in <code>src/streamlit_extras/chart_container/__init__.py</code> <pre><code>@extra  # type: ignore\n@contextmanager\ndef chart_container(\n    data: pd.DataFrame,\n    tabs: Sequence[str] = (\n        \"Chart \ud83d\udcc8\",\n        \"Dataframe \ud83d\udcc4\",\n        \"Export \ud83d\udcc1\",\n    ),\n    export_formats: Sequence[str] = _SUPPORTED_EXPORT_KEYS,\n) -&gt; Generator:\n    \"\"\"Embed chart in a (chart, data, export, explore) tabs container to let the viewer explore and export its underlying data.\n\n    Args:\n        data (pd.DataFrame): Dataframe used in the dataframe tab.\n        tabs (Sequence, optional): Tab labels. Defaults to (\"Chart \ud83d\udcc8\", \"Dataframe \ud83d\udcc4\", \"Export \ud83d\udcc1\").\n        export_formats (Sequence, optional): Export file formats. Defaults to (\"CSV\", \"Parquet\")\n    \"\"\"\n\n    assert all(\n        export_format in _SUPPORTED_EXPORTS for export_format in export_formats\n    ), f\"Input format is not supported, please use one within {_SUPPORTED_EXPORTS.keys()}\"\n\n    if \"chart_container_widget_key\" not in st.session_state:\n        st.session_state[\"chart_container_widget_key\"] = 0\n\n    def _get_random_widget_key() -&gt; str:\n        st.session_state.chart_container_widget_key += 1\n        return st.session_state.chart_container_widget_key\n\n    tab_1, tab_2, tab_3 = st.tabs(tabs)\n\n    with tab_1:\n        yield\n\n    with tab_2:\n        st.dataframe(data, use_container_width=True)\n\n    with tab_3:\n        st.caption(\"Export limited to 1 million rows.\")\n        export_data = data.head(1_000_000)\n        for chosen_export_format in export_formats:\n            export_utils = _SUPPORTED_EXPORTS[chosen_export_format]\n            exporter = export_utils[\"function\"]\n            extension = export_utils[\"extension\"]\n            st.download_button(\n                f\"Download data as {extension}\",\n                data=exporter(export_data),\n                file_name=\"data\" + extension,\n                mime=export_utils.get(\"mime\"),\n                key=_get_random_widget_key(),\n            )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.chart_container import chart_container # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/chart_container/#examples","title":"Examples","text":""},{"location":"extras/chart_container/#example_one","title":"<code>example_one</code>","text":"<pre><code>def example_one():\n    chart_data = _get_random_data()\n    with chart_container(chart_data):\n        st.write(\"Here's a cool chart\")\n        st.area_chart(chart_data)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/chart_container/#example_two","title":"<code>example_two</code>","text":"<pre><code>def example_two():\n    chart_data = _get_random_data()\n    with chart_container(chart_data):\n        st.write(\n            \"I can use a subset of the data for my chart... \"\n            \"but still give all the necessary context in \"\n            \"`chart_container`!\"\n        )\n        st.area_chart(chart_data[[\"a\", \"b\"]])\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/colored_header/","title":"\ud83d\udd8c\ufe0f\u00a0\u00a0Color ya Headers","text":"<p>Submitted by Johannes Rieke / Tyler Richards</p>"},{"location":"extras/colored_header/#summary","title":"Summary","text":"<p>This function makes headers much prettier in Streamlit.            Note that this now accessible in native Streamlit in st.header            with parameter <code>divider</code>!</p>"},{"location":"extras/colored_header/#functions","title":"Functions","text":""},{"location":"extras/colored_header/#colored_header","title":"<code>colored_header</code>","text":"<p>Shows a header with a colored underline and an optional description.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Header label. Defaults to \"Nice title\".</p> <code>'Nice title'</code> <code>description</code> <code>str</code> <p>Description shown under the header. Defaults to \"Cool description\".</p> <code>'Cool description'</code> <code>color_name</code> <code>_SUPPORTED_COLORS</code> <p>Color of the underline. Defaults to \"red-70\". Supported colors are \"light-blue-70\", \"orange-70\", \"blue-green-70\", \"blue-70\", \"violet-70\", \"red-70\", \"green-70\", \"yellow-80\".</p> <code>'red-70'</code> Source code in <code>src/streamlit_extras/colored_header/__init__.py</code> <pre><code>@extra\ndef colored_header(\n    label: str = \"Nice title\",\n    description: str = \"Cool description\",\n    color_name: _SUPPORTED_COLORS = \"red-70\",\n):\n    \"\"\"\n    Shows a header with a colored underline and an optional description.\n\n    Args:\n        label (str, optional): Header label. Defaults to \"Nice title\".\n        description (str, optional): Description shown under the header. Defaults to \"Cool description\".\n        color_name (_SUPPORTED_COLORS, optional): Color of the underline. Defaults to \"red-70\".\n            Supported colors are \"light-blue-70\", \"orange-70\", \"blue-green-70\", \"blue-70\", \"violet-70\",\n            \"red-70\", \"green-70\", \"yellow-80\".\n    \"\"\"\n    if color_name is None:\n        color_name = next(HEADER_COLOR_CYCLE)\n    st.subheader(label)\n    st.write(\n        f'&lt;hr style=\"background-color: {color(color_name)}; margin-top: 0;'\n        ' margin-bottom: 0; height: 3px; border: none; border-radius: 3px;\"&gt;',\n        unsafe_allow_html=True,\n    )\n    if description:\n        st.caption(description)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.colored_header import colored_header # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/colored_header/#examples","title":"Examples","text":""},{"location":"extras/colored_header/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    colored_header(\n        label=\"My New Pretty Colored Header\",\n        description=\"This is a description\",\n        color_name=\"violet-70\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/customize_running/","title":"\ud83c\udfc3\u200d\u2642\ufe0f\u00a0\u00a0Customize running","text":"<p>Submitted by koninhoo</p>"},{"location":"extras/customize_running/#summary","title":"Summary","text":"<p>Customize the running widget</p>"},{"location":"extras/customize_running/#functions","title":"Functions","text":""},{"location":"extras/customize_running/#center_running","title":"<code>center_running</code>","text":"<p>Have the \"running man\" animation in the center of the screen instead of the top right corner.</p> Source code in <code>src/streamlit_extras/customize_running/__init__.py</code> <pre><code>@extra\ndef center_running():\n    \"\"\"\n    Have the \"running man\" animation in the center of the screen instead of the top right corner.\n    \"\"\"\n    st.markdown(center_css, unsafe_allow_html=True)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.customize_running import center_running # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/customize_running/#examples","title":"Examples","text":""},{"location":"extras/customize_running/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    click = st.button(\"Observe where the \ud83c\udfc3\u200d\u2642\ufe0f running widget is now!\")\n    if click:\n        center_running()\n        time.sleep(2)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/dataframe_explorer/","title":"\ud83d\udd2d\u00a0\u00a0Dataframe explorer UI","text":"<p>Submitted by Streamlit Data Team!</p>"},{"location":"extras/dataframe_explorer/#summary","title":"Summary","text":"<p>Let your viewers explore dataframes themselves! Learn more about it on this blog post</p>"},{"location":"extras/dataframe_explorer/#functions","title":"Functions","text":""},{"location":"extras/dataframe_explorer/#dataframe_explorer","title":"<code>dataframe_explorer</code>","text":"<p>Adds a UI on top of a dataframe to let viewers filter columns</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Original dataframe</p> required <code>case</code> <code>bool</code> <p>If True, text inputs will be case sensitive. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Filtered dataframe</p> Source code in <code>src/streamlit_extras/dataframe_explorer/__init__.py</code> <pre><code>@extra\ndef dataframe_explorer(df: pd.DataFrame, case: bool = True) -&gt; pd.DataFrame:\n    \"\"\"\n    Adds a UI on top of a dataframe to let viewers filter columns\n\n    Args:\n        df (pd.DataFrame): Original dataframe\n        case (bool, optional): If True, text inputs will be case sensitive. Defaults to True.\n\n    Returns:\n        pd.DataFrame: Filtered dataframe\n    \"\"\"\n\n    random_key_base = pd.util.hash_pandas_object(df)\n\n    df = df.copy()\n\n    # Try to convert datetimes into standard format (datetime, no timezone)\n    for col in df.columns:\n        if is_object_dtype(df[col]):\n            try:\n                df[col] = pd.to_datetime(df[col])\n            except Exception:\n                pass\n\n        if is_datetime64_any_dtype(df[col]):\n            df[col] = df[col].dt.tz_localize(None)\n\n    modification_container = st.container()\n\n    with modification_container:\n        to_filter_columns = st.multiselect(\n            \"Filter dataframe on\",\n            df.columns,\n            key=f\"{random_key_base}_multiselect\",\n        )\n        filters: Dict[str, Any] = dict()\n        for column in to_filter_columns:\n            left, right = st.columns((1, 20))\n            # Treat columns with &lt; 10 unique values as categorical\n            if is_categorical_dtype(df[column]) or df[column].nunique() &lt; 10:\n                left.write(\"\u21b3\")\n                filters[column] = right.multiselect(\n                    f\"Values for {column}\",\n                    df[column].unique(),\n                    default=list(df[column].unique()),\n                    key=f\"{random_key_base}_{column}\",\n                )\n                df = df[df[column].isin(filters[column])]\n            elif is_numeric_dtype(df[column]):\n                left.write(\"\u21b3\")\n                _min = float(df[column].min())\n                _max = float(df[column].max())\n                step = (_max - _min) / 100\n                filters[column] = right.slider(\n                    f\"Values for {column}\",\n                    _min,\n                    _max,\n                    (_min, _max),\n                    step=step,\n                    key=f\"{random_key_base}_{column}\",\n                )\n                df = df[df[column].between(*filters[column])]\n            elif is_datetime64_any_dtype(df[column]):\n                left.write(\"\u21b3\")\n                filters[column] = right.date_input(\n                    f\"Values for {column}\",\n                    value=(\n                        df[column].min(),\n                        df[column].max(),\n                    ),\n                    key=f\"{random_key_base}_{column}\",\n                )\n                if len(filters[column]) == 2:\n                    filters[column] = tuple(map(pd.to_datetime, filters[column]))\n                    start_date, end_date = filters[column]\n                    df = df.loc[df[column].between(start_date, end_date)]\n            else:\n                left.write(\"\u21b3\")\n                filters[column] = right.text_input(\n                    f\"Pattern in {column}\",\n                    key=f\"{random_key_base}_{column}\",\n                )\n                if filters[column]:\n                    df = df[df[column].str.contains(filters[column], case=case)]\n\n    return df\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.dataframe_explorer import dataframe_explorer # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/dataframe_explorer/#examples","title":"Examples","text":""},{"location":"extras/dataframe_explorer/#example_one","title":"<code>example_one</code>","text":"<pre><code>def example_one():\n    dataframe = generate_fake_dataframe(\n        size=500, cols=\"dfc\", col_names=(\"date\", \"income\", \"person\"), seed=1\n    )\n    filtered_df = dataframe_explorer(dataframe, case=False)\n    st.dataframe(filtered_df, use_container_width=True)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/echo_expander/","title":"\ud83c\udd92\u00a0\u00a0Echo Expander","text":"<p>Submitted by Brian Hess</p>"},{"location":"extras/echo_expander/#summary","title":"Summary","text":"<p>Execute code, and show the code that was executed, but in an expander.</p>"},{"location":"extras/echo_expander/#functions","title":"Functions","text":""},{"location":"extras/echo_expander/#echo_expander","title":"<code>echo_expander</code>","text":"<p>Execute code, and show the code that was executed, but in an expander.</p> <p>Parameters:</p> Name Type Description Default <code>code_location</code> <code>str</code> <p>Whether to show the echoed code above or below. Defaults to \"above\".</p> <code>'above'</code> <code>expander</code> <code>bool</code> <p>Whether the code block should occur in an expander. Defaults to True.</p> <code>True</code> <code>label</code> <code>str</code> <p>If expander is True, then the label for the expander. Defaults to \"Show code\".</p> <code>'Show code'</code> Source code in <code>src/streamlit_extras/echo_expander/__init__.py</code> <pre><code>@extra\n@contextlib.contextmanager\ndef echo_expander(code_location=\"above\", expander=True, label=\"Show code\"):\n    \"\"\"\n    Execute code, and show the code that was executed, but in an expander.\n\n    Args:\n        code_location (str, optional): Whether to show the echoed code above or below. Defaults to \"above\".\n        expander (bool, optional): Whether the code block should occur in an expander. Defaults to True.\n        label (str, optional): If expander is True, then the label for the expander. Defaults to \"Show code\".\n    \"\"\"\n\n    from streamlit import empty, source_util\n\n    if code_location == \"above\":\n        placeholder = empty()\n    else:\n        placeholder = st\n\n    try:\n        # Get stack frame *before* running the echoed code. The frame's\n        # line number will point to the `st.echo` statement we're running.\n        frame = traceback.extract_stack()[-3]\n        filename, start_line = frame.filename, frame.lineno\n\n        # Read the file containing the source code of the echoed statement.\n        with source_util.open_python_file(filename) as source_file:\n            source_lines = source_file.readlines()\n\n        # Use ast to parse the Python file and find the code block to display\n        import ast\n\n        ap = ast.parse(\"\".join(source_lines))\n\n        ap_map = {}\n\n        def map_ast(a):\n            if not hasattr(a, \"body\"):\n                return\n            for b in a.body:\n                ap_map[b.lineno] = b\n                map_ast(b)\n\n        map_ast(ap)\n        lines_to_display = source_lines[\n            ap_map[start_line].body[0].lineno - 1 : ap_map[start_line].end_lineno\n        ]\n        code_string = textwrap.dedent(\"\".join(lines_to_display))\n\n        # Run the echoed code...\n        yield\n\n        # And draw the code string to the app!\n        if expander:\n            placeholder.expander(label).code(code_string, \"python\")\n        else:\n            placeholder.code(code_string, \"python\")\n\n    except FileNotFoundError as err:\n        placeholder.warning(\"Unable to display code. %s\" % err)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.echo_expander import echo_expander # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/echo_expander/#examples","title":"Examples","text":""},{"location":"extras/echo_expander/#example1","title":"<code>example1</code>","text":"<pre><code>def example1():\n    with echo_expander():\n        import streamlit as st\n\n        st.markdown(\n            \"\"\"\n            This component is a combination of `st.echo` and `st.expander`.\n            The code inside the `with echo_expander()` block will be executed,\n            and the code can be shown/hidden behind an expander\n            \"\"\"\n        )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/echo_expander/#example2","title":"<code>example2</code>","text":"<pre><code>def example2():\n    with echo_expander(code_location=\"below\", label=\"Simple Dataframe example\"):\n        import pandas as pd\n        import streamlit as st\n\n        df = pd.DataFrame(\n            [[1, 2, 3, 4, 5], [11, 12, 13, 14, 15]],\n            columns=(\"A\", \"B\", \"C\", \"D\", \"E\"),\n        )\n        st.dataframe(df)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/embed_code/","title":"\ud83d\udccb\u00a0\u00a0Embed code","text":"<p>Submitted by randyzwitch</p>"},{"location":"extras/embed_code/#summary","title":"Summary","text":"<p>Embed code from various platforms (Gists, snippets...)</p>"},{"location":"extras/embed_code/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/embed_code/#examples","title":"Examples","text":""},{"location":"extras/embed_code/#example_github","title":"<code>example_github</code>","text":"<pre><code>def example_github():\n    github_gist(\n        \"https://gist.github.com/randyzwitch/be8c5e9fb5b8e7b046afebcac12e5087/\",\n        width=700,\n        height=400,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/embed_code/#example_gitlab","title":"<code>example_gitlab</code>","text":"<pre><code>def example_gitlab():\n    gitlab_snippet(\n        \"https://gitlab.com/snippets/1995463\",\n        width=700,\n        height=200,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/faker/","title":"\ud83e\udd77\u00a0\u00a0Streamlit Faker","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/faker/#summary","title":"Summary","text":"<p>Fake Streamlit commands at the speed of light! Great for prototyping apps.</p>"},{"location":"extras/faker/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/faker/#examples","title":"Examples","text":""},{"location":"extras/faker/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    fake = get_streamlit_faker(seed=42)\n    fake.markdown()\n    fake.info(icon=\"\ud83d\udca1\", body=\"You can also pass explicit parameters!\")\n    fake.selectbox()\n    fake.slider()\n    fake.metric()\n    fake.altair_chart()\n</code></pre>"},{"location":"extras/function_explorer/","title":"\ud83d\udc69\u200d\ud83d\ude80\u00a0\u00a0Function explorer","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/function_explorer/#summary","title":"Summary","text":"<p>Give a UI to any Python function! Very alpha though</p>"},{"location":"extras/function_explorer/#functions","title":"Functions","text":""},{"location":"extras/function_explorer/#function_explorer","title":"<code>function_explorer</code>","text":"<p>Gives a Streamlit UI to any function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>callable</code> <p>Python function</p> required Source code in <code>src/streamlit_extras/function_explorer/__init__.py</code> <pre><code>@extra\ndef function_explorer(func: Callable):\n    \"\"\"Gives a Streamlit UI to any function.\n\n    Args:\n        func (callable): Python function\n    \"\"\"\n\n    args = get_arg_details(func)\n    inputs: Dict[str, Any] = dict()\n\n    st.write(\"##### Inputs\")\n    st.write(\n        f\"Go ahead and play with `{func.__name__}` parameters, see how\"\n        \" they change the output!\"\n    )\n\n    for argument_info in args:\n        argument, type_hint, default = argument_info.values()\n        label = argument if not is_empty(default) else f\"{argument}*\"\n\n        if is_empty(type_hint):\n            default = (\n                get_arg_from_session_state(func.__name__, argument) or default\n                if not is_empty(default)\n                else \"Sample string\"\n            )\n            inputs[argument] = st.text_input(label, value=default)\n        else:\n            if hasattr(type_hint, \"__name__\"):\n                label += f\" ({type_hint.__name__})\"\n            elif str(type_hint).startswith(\"typing.Literal\"):\n                label += \" (typing.Literal)\"\n            else:\n                raise Exception(f\"Not sure how to handle {type_hint}\")\n            if type_hint == int:\n                default = get_arg_from_session_state(func.__name__, argument) or (\n                    default if not is_empty(default) else 12\n                )\n                inputs[argument] = st.number_input(label, step=1, value=default)\n            elif type_hint == float:\n                default = (\n                    get_arg_from_session_state(func.__name__, argument) or default\n                    if not is_empty(default)\n                    else 12.0\n                )\n                inputs[argument] = st.number_input(label, value=default)\n            elif type_hint == str:\n                if argument.endswith(\"_color\"):\n                    default = (\n                        get_arg_from_session_state(func.__name__, argument) or default\n                        if not is_empty(default)\n                        else \"#000000\"\n                    )\n                    inputs[argument] = st.color_picker(label, value=default)\n                else:\n                    default = (\n                        get_arg_from_session_state(func.__name__, argument) or default\n                        if not is_empty(default)\n                        else \"Sample string\"\n                    )\n                    inputs[argument] = st_keyup(label, value=default)\n            elif type_hint == bool:\n                default = (\n                    get_arg_from_session_state(func.__name__, argument) or default\n                    if not is_empty(default)\n                    else True\n                )\n                inputs[argument] = st.checkbox(label, value=default)\n            elif type_hint == pd.DataFrame:\n                inputs[argument] = get_arg_from_session_state(\n                    func.__name__, argument\n                ) or pd.DataFrame([\"abcde\"])\n            elif str(type_hint).startswith(\"typing.Literal\"):\n                options = get_args(type_hint)\n                default = (\n                    get_arg_from_session_state(func.__name__, argument) or default\n                    if not is_empty(default)\n                    else options[0]\n                )\n                idx = options.index(default)\n                inputs[argument] = st.selectbox(label, options, index=idx)\n            else:\n                st.warning(f\"`function_explorer` does not support type {type_hint}\")\n\n    st.write(\"##### Output\")\n    func(**inputs)\n    if func.__name__ not in st.session_state:\n        st.session_state[func.__name__] = {}\n    st.session_state[func.__name__][\"inputs\"] = inputs\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.function_explorer import function_explorer # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/function_explorer/#examples","title":"Examples","text":""},{"location":"extras/function_explorer/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    def foo(age: int, name: str, image_url: str = \"http://placekitten.com/120/120\"):\n        st.write(f\"Hey! My name is {name} and I'm {age} years old\")\n        st.write(\"Here's a picture\")\n        st.image(image_url)\n\n    function_explorer(foo)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/grid/","title":"\ud83d\udca0\u00a0\u00a0Grid Layout","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/grid/#summary","title":"Summary","text":"<p>A multi-element container that places elements on a specified grid layout.</p>"},{"location":"extras/grid/#functions","title":"Functions","text":""},{"location":"extras/grid/#grid","title":"<code>grid</code>","text":"<p>Insert a multi-element, grid container into your app.</p> <p>This function inserts a container into your app that arranges multiple elements in a grid layout as defined by the provided spec. Elements can be added to the returned container by calling methods directly on the returned object.</p> <p>Parameters:</p> Name Type Description Default <code>*spec</code> <code>int | Iterable[int]</code> <p>One or many row specs controlling the number and width of cells in each row. Each spec can be one of:     * An integer specifying the number of cells. In this case, all cells have equal     width.     * An iterable of numbers (int or float) specifying the relative width of     each cell. E.g., <code>[0.7, 0.3]</code> creates two cells, the first     one occupying 70% of the available width and the second one 30%.     Or, <code>[1, 2, 3]</code> creates three cells where the second one is twice     as wide as the first one, and the third one is three times that width.     The function iterates over the provided specs in a round-robin order. Upon filling a row,     it moves on to the next spec, or the first spec if there are no     more specs.</p> <code>()</code> <code>gap</code> <code>Optional[str]</code> <p>The size of the gap between cells, specified as \"small\", \"medium\", or \"large\". This parameter defines the visual space between grid cells. Defaults to \"small\".</p> <code>'small'</code> <code>vertical_align</code> <code>Literal['top', 'center', 'bottom']</code> <p>The vertical alignment of the cells in the row. Defaults to \"top\".</p> <code>'top'</code> Source code in <code>src/streamlit_extras/grid/__init__.py</code> <pre><code>@extra\ndef grid(\n    *spec: SpecType,\n    gap: Optional[str] = \"small\",\n    vertical_align: Literal[\"top\", \"center\", \"bottom\"] = \"top\",\n):\n    \"\"\"\n    Insert a multi-element, grid container into your app.\n\n    This function inserts a container into your app that arranges\n    multiple elements in a grid layout as defined by the provided spec.\n    Elements can be added to the returned container by calling methods directly\n    on the returned object.\n\n    Args:\n        *spec (int | Iterable[int]): One or many row specs controlling the number and width of cells in each row.\n            Each spec can be one of:\n                * An integer specifying the number of cells. In this case, all cells have equal\n                width.\n                * An iterable of numbers (int or float) specifying the relative width of\n                each cell. E.g., ``[0.7, 0.3]`` creates two cells, the first\n                one occupying 70% of the available width and the second one 30%.\n                Or, ``[1, 2, 3]`` creates three cells where the second one is twice\n                as wide as the first one, and the third one is three times that width.\n                The function iterates over the provided specs in a round-robin order. Upon filling a row,\n                it moves on to the next spec, or the first spec if there are no\n                more specs.\n        gap (Optional[str], optional): The size of the gap between cells, specified as \"small\", \"medium\", or \"large\".\n            This parameter defines the visual space between grid cells. Defaults to \"small\".\n        vertical_align (Literal[\"top\", \"center\", \"bottom\"], optional): The vertical alignment of the cells in the row.\n            Defaults to \"top\".\n    \"\"\"\n\n    container = stylable_container.stylable_container(\n        key=f\"grid_{vertical_align}\",\n        css_styles=[\n            \"\"\"\ndiv[data-testid=\"column\"] &gt; div[data-testid=\"stVerticalBlockBorderWrapper\"] &gt; div {\nheight: 100%;\n}\n\"\"\",\n            \"\"\"\ndiv[data-testid=\"column\"] &gt; div {\nheight: 100%;\n}\n\"\"\",\n            f\"\"\"\ndiv[data-testid=\"column\"] &gt; div[data-testid=\"stVerticalBlockBorderWrapper\"] &gt; div &gt; div[data-testid=\"stVerticalBlock\"] &gt; div.element-container {{\n    {\"margin-top: auto;\" if vertical_align in [\"center\", \"bottom\"] else \"\"}\n    {\"margin-bottom: auto;\" if vertical_align == \"center\" else \"\"}\n}}\n\"\"\",\n            f\"\"\"\ndiv[data-testid=\"column\"] &gt; div &gt; div[data-testid=\"stVerticalBlock\"] &gt; div.element-container {{\n    {\"margin-top: auto;\" if vertical_align in [\"center\", \"bottom\"] else \"\"}\n    {\"margin-bottom: auto;\" if vertical_align == \"center\" else \"\"}\n}}\n\"\"\",\n        ],\n    )\n\n    return GridDeltaGenerator(\n        parent_dg=container, spec=list(spec), gap=gap, repeat=True\n    )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.grid import grid # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/grid/#examples","title":"Examples","text":""},{"location":"extras/grid/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    random_df = pd.DataFrame(np.random.randn(20, 3), columns=[\"a\", \"b\", \"c\"])\n\n    my_grid = grid(2, [2, 4, 1], 1, 4, vertical_align=\"bottom\")\n\n    # Row 1:\n    my_grid.dataframe(random_df, use_container_width=True)\n    my_grid.line_chart(random_df, use_container_width=True)\n    # Row 2:\n    my_grid.selectbox(\"Select Country\", [\"Germany\", \"Italy\", \"Japan\", \"USA\"])\n    my_grid.text_input(\"Your name\")\n    my_grid.button(\"Send\", use_container_width=True)\n    # Row 3:\n    my_grid.text_area(\"Your message\", height=40)\n    # Row 4:\n    my_grid.button(\"Example 1\", use_container_width=True)\n    my_grid.button(\"Example 2\", use_container_width=True)\n    my_grid.button(\"Example 3\", use_container_width=True)\n    my_grid.button(\"Example 4\", use_container_width=True)\n    # Row 5 (uses the spec from row 1):\n    with my_grid.expander(\"Show Filters\", expanded=True):\n        st.slider(\"Filter by Age\", 0, 100, 50)\n        st.slider(\"Filter by Height\", 0.0, 2.0, 1.0)\n        st.slider(\"Filter by Weight\", 0.0, 100.0, 50.0)\n    my_grid.dataframe(random_df, use_container_width=True)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/image_coordinates/","title":"\ud83c\udfaf\u00a0\u00a0Streamlit Image Coordinates","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/image_coordinates/#summary","title":"Summary","text":"<p>Allows you to add an image to your app, and get the coordinates of where the user last clicked on the image.</p>"},{"location":"extras/image_coordinates/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/image_coordinates/#examples","title":"Examples","text":""},{"location":"extras/image_coordinates/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    \"# Click on the image\"\n    last_coordinates = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\n\n    st.write(last_coordinates)\n</code></pre>"},{"location":"extras/image_in_tables/","title":"\ud83d\udea9\u00a0\u00a0Image in tables","text":"<p>Submitted by dataprofessor</p>"},{"location":"extras/image_in_tables/#summary","title":"Summary","text":"<p>Transform URLs into images in your dataframes</p>"},{"location":"extras/image_in_tables/#functions","title":"Functions","text":""},{"location":"extras/image_in_tables/#table_with_images","title":"<code>table_with_images</code>","text":"<p>Generate the HTML of a table with images rendered in it.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Original dataframe</p> required <code>url_columns</code> <code>Iterable</code> <p>Column in df which contains URLs</p> required <p>Returns:</p> Name Type Description <code>table_html</code> <code>str</code> <p>HTML of the table with images</p> Source code in <code>src/streamlit_extras/image_in_tables/__init__.py</code> <pre><code>@extra\n@cache_data\ndef table_with_images(df: pd.DataFrame, url_columns: Iterable) -&gt; str:\n    \"\"\"\n    Generate the HTML of a table with images rendered in it.\n\n    Args:\n        df (pd.DataFrame): Original dataframe\n        url_columns (Iterable): Column in df which contains URLs\n\n    Returns:\n        table_html (str): HTML of the table with images\n    \"\"\"\n\n    df_ = df.copy()\n\n    @cache_data\n    def _path_to_image_html(path):\n        return '&lt;img src=\"' + path + '\" width=\"60\" &gt;'\n\n    for column in url_columns:\n        df_[column] = df_[column].apply(_path_to_image_html)\n\n    table_html = df_.to_html(escape=False)\n\n    return table_html\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.image_in_tables import table_with_images # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/image_in_tables/#examples","title":"Examples","text":""},{"location":"extras/image_in_tables/#example","title":"<code>example</code>","text":"<pre><code>def example(df: pd.DataFrame):\n    st.caption(\"Input dataframe (notice 'Flag' column is full of URLs)\")\n    st.write(df)\n    df_html = table_with_images(df=df, url_columns=(\"Flag\",))\n    st.caption(\"Ouput\")\n    st.markdown(df_html, unsafe_allow_html=True)\n</code></pre>"},{"location":"extras/jupyterlite/","title":"\ud83d\udca1\u00a0\u00a0Jupyterlite","text":"<p>Submitted by Rahul Chauhan</p>"},{"location":"extras/jupyterlite/#summary","title":"Summary","text":"<p>Add a Jupyterlite sandbox to your Streamlit app in one command</p>"},{"location":"extras/jupyterlite/#functions","title":"Functions","text":""},{"location":"extras/jupyterlite/#jupyterlite_1","title":"<code>jupyterlite</code>","text":"<p>Add a Jupyterlite sandbox to your Streamlit app</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>int</code> <p>Height of the Jupyterlite sandbox. Default value is 600.</p> <code>600</code> <code>width</code> <code>int</code> <p>Width of the Jupyterlite sandbox.  Default value is 800</p> <code>800</code> Source code in <code>src/streamlit_extras/jupyterlite/__init__.py</code> <pre><code>@extra\ndef jupyterlite(height: int = 600, width: int = 800):\n    \"\"\"\n    Add a Jupyterlite sandbox to your Streamlit app\n\n    Args:\n        height (int): Height of the Jupyterlite sandbox. Default value is 600.\n        width (int): Width of the Jupyterlite sandbox.  Default value is 800\n    \"\"\"\n\n    iframe(\n        src=\"https://jupyterlite.github.io/demo/repl/index.html?kernel=python&amp;toolbar=1\",\n        height=height,\n        width=width,\n    )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.jupyterlite import jupyterlite # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/jupyterlite/#examples","title":"Examples","text":""},{"location":"extras/jupyterlite/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    jupyterlite(1500, 1600)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/keyboard_text/","title":"\u2328\ufe0f\u00a0\u00a0Keyboard text","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/keyboard_text/#summary","title":"Summary","text":"<p>Create a keyboard styled text</p>"},{"location":"extras/keyboard_text/#functions","title":"Functions","text":""},{"location":"extras/keyboard_text/#key","title":"<code>key</code>","text":"<p>Applies a custom CSS to input text which makes it look like a keyboard key. To be used after running load_key_css() at least once in the app!</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text that will be styled as a key</p> required <code>write</code> <code>bool</code> <p>If True, this will st.write() the key</p> <code>True</code> <p>Returns:     str: HTML of the text, styled as a key</p> Source code in <code>src/streamlit_extras/keyboard_text/__init__.py</code> <pre><code>@extra\ndef key(text: str, write: bool = True) -&gt; str:\n    \"\"\"Applies a custom CSS to input text which makes it look like a keyboard key.\n    To be used after running load_key_css() at least once in the app!\n\n    Args:\n        text (str): Text that will be styled as a key\n        write (bool): If True, this will st.write() the key\n    Returns:\n        str: HTML of the text, styled as a key\n    \"\"\"\n\n    key_html = str(span(_class=\"keyx\")(text))\n\n    if write:\n        st.write(key_html, unsafe_allow_html=True)\n\n    return key_html\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.keyboard_text import key # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/keyboard_text/#examples","title":"Examples","text":""},{"location":"extras/keyboard_text/#example_default","title":"<code>example_default</code>","text":"<pre><code>def example_default():\n    load_key_css()\n    key(\"\u2318+K\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/keyboard_text/#example_inline","title":"<code>example_inline</code>","text":"<pre><code>def example_inline():\n    load_key_css()\n    st.write(\n        f\"Also works inline! Example: {key('\u2318+K', write=False)}\",\n        unsafe_allow_html=True,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/keyboard_url/","title":"\ud83c\udfaf\u00a0\u00a0Keyboard to URL","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/keyboard_url/#summary","title":"Summary","text":"<p>Create bindings so that hitting a key on your keyboard opens an URL in a new tab!</p>"},{"location":"extras/keyboard_url/#functions","title":"Functions","text":""},{"location":"extras/keyboard_url/#keyboard_to_url","title":"<code>keyboard_to_url</code>","text":"<p>Map a keyboard key to open a new tab with a given URL.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key to trigger (example 'k'). Defaults to None.</p> <code>None</code> <code>key_code</code> <code>int</code> <p>If key doesn't work, try hard-coding the key_code instead. Defaults to None.</p> <code>None</code> <code>url</code> <code>str</code> <p>Opens the input URL in new tab. Defaults to None.</p> <code>None</code> Source code in <code>src/streamlit_extras/keyboard_url/__init__.py</code> <pre><code>@extra\ndef keyboard_to_url(\n    key: str | None = None,\n    key_code: int | None = None,\n    url: str | None = None,\n):\n    \"\"\"\n\n    Map a keyboard key to open a new tab with a given URL.\n\n    Args:\n        key (str, optional): Key to trigger (example 'k'). Defaults to None.\n        key_code (int, optional): If key doesn't work, try hard-coding the key_code instead. Defaults to None.\n        url (str, optional): Opens the input URL in new tab. Defaults to None.\n    \"\"\"\n\n    assert not (\n        key and key_code\n    ), \"\"\"You can not provide key and key_code.\n    Either give key and we'll try to find its associated key_code. Or directly\n    provide the key_code.\"\"\"\n\n    assert (key or key_code) and url, \"\"\"You must provide key or key_code, and a URL\"\"\"\n\n    if key:\n        key_code_js_row = f\"const keyCode = '{key}'.toUpperCase().charCodeAt(0);\"\n    elif key_code:\n        key_code_js_row = f\"const keyCode = {key_code};\"\n    else:\n        raise ValueError(\"You must provide key or key_code\")\n\n    components.html(\n        f\"\"\"\n&lt;script&gt;\nconst doc = window.parent.document;\nbuttons = Array.from(doc.querySelectorAll('button[kind=primary]'));\n{key_code_js_row}\ndoc.addEventListener('keydown', function(e) {{\n    e = e || window.event;\n    var target = e.target || e.srcElement;\n    // Only trigger the events if they're not happening in an input/textarea/select/button field\n    if ( !/INPUT|TEXTAREA|SELECT|BUTTON/.test(target.nodeName) ) {{\n        switch (e.keyCode) {{\n            case keyCode:\n                window.open('{url}', '_blank').focus();\n                break;\n        }}\n    }}\n}});\n&lt;/script&gt;\n\"\"\",\n        height=0,\n        width=0,\n    )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.keyboard_url import keyboard_to_url # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/keyboard_url/#examples","title":"Examples","text":""},{"location":"extras/keyboard_url/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    # Main function\n    keyboard_to_url(key=\"S\", url=\"https://www.github.com/streamlit/streamlit\")\n\n    load_key_css()\n    st.write(\n        f\"\"\"Now hit {key(\"S\", False)} on your keyboard...!\"\"\",\n        unsafe_allow_html=True,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/let_it_rain/","title":"\ud83c\udf27\ufe0f\u00a0\u00a0Let emojis rain","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/let_it_rain/#summary","title":"Summary","text":"<p>Use this to create more animations like st.balloons() and st.snow()</p>"},{"location":"extras/let_it_rain/#functions","title":"Functions","text":""},{"location":"extras/let_it_rain/#rain","title":"<code>rain</code>","text":"<p>Creates a CSS animation where input emoji falls from top to bottom of the screen.</p> <p>Parameters:</p> Name Type Description Default <code>emoji</code> <code>str</code> <p>Emoji</p> required <code>font_size</code> <code>int</code> <p>Font size. Defaults to 64.</p> <code>64</code> <code>falling_speed</code> <code>int</code> <p>Speed at which the emoji 'falls'. Defaults to 5.</p> <code>5</code> <code>animation_length</code> <code>Union[int, str]</code> <p>Length of the animation. Defaults to \"infinite\".</p> <code>'infinite'</code> Source code in <code>src/streamlit_extras/let_it_rain/__init__.py</code> <pre><code>@extra\ndef rain(\n    emoji: str,\n    font_size: int = 64,\n    falling_speed: int = 5,\n    animation_length: Union[int, str] = \"infinite\",\n):\n    \"\"\"\n    Creates a CSS animation where input emoji falls from top to bottom of the screen.\n\n    Args:\n        emoji (str): Emoji\n        font_size (int, optional): Font size. Defaults to 64.\n        falling_speed (int, optional): Speed at which the emoji 'falls'. Defaults to 5.\n        animation_length (Union[int, str], optional): Length of the animation. Defaults to \"infinite\".\n    \"\"\"\n\n    if isinstance(animation_length, int):\n        animation_length = f\"{animation_length}\"\n\n    st.write(\n        f\"\"\"\n    &lt;style&gt;\n\n    body {{\n    background: gray;\n    }}\n\n    .emoji {{\n    color: #777;\n    font-size: {font_size}px;\n    font-family: Arial;\n    // text-shadow: 0 0 5px #000;\n    }}\n\n    ///*delete for no hover-effect*/\n    //.emoji:hover {{\n    //  font-size: 60px;\n    //  text-shadow: 5px 5px 5px white;\n    //}}\n\n    @-webkit-keyframes emojis-fall {{\n    0% {{\n        top: -10%;\n    }}\n    100% {{\n        top: 100%;\n    }}\n    }}\n    @-webkit-keyframes emojis-shake {{\n    0% {{\n        -webkit-transform: translateX(0px);\n        transform: translateX(0px);\n    }}\n    50% {{\n        -webkit-transform: translateX(20px);\n        transform: translateX(20px);\n    }}\n    100% {{\n        -webkit-transform: translateX(0px);\n        transform: translateX(0px);\n    }}\n    }}\n    @keyframes emojis-fall {{\n    0% {{\n        top: -10%;\n    }}\n    100% {{\n        top: 100%;\n    }}\n    }}\n    @keyframes emojis-shake {{\n    0% {{\n        transform: translateX(0px);\n    }}\n    25% {{\n        transform: translateX(15px);\n    }}\n    50% {{\n        transform: translateX(-15px);\n    }}\n    100% {{\n        transform: translateX(0px);\n    }}\n    }}\n\n    .emoji {{\n    position: fixed;\n    top: -10%;\n    z-index: 99999;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    cursor: default;\n    -webkit-animation-name: emojis-fall, emojis-shake;\n    -webkit-animation-duration: 5s, 3s;\n    -webkit-animation-timing-function: linear, ease-in-out;\n    -webkit-animation-iteration-count: {animation_length}, {animation_length}; // overall length\n    -webkit-animation-play-state: running, running;\n    animation-name: emojis-fall, emojis-shake;\n    animation-duration: {falling_speed}s, 3s;  // fall speed\n    animation-timing-function: linear, ease-in-out;\n    animation-iteration-count: {animation_length}, {animation_length}; // overall length\n    animation-play-state: running, running;\n    }}\n    .emoji:nth-of-type(0) {{\n    left: 1%;\n    -webkit-animation-delay: 0s, 0s;\n    animation-delay: 0s, 0s;\n    }}\n    .emoji:nth-of-type(1) {{\n    left: 10%;\n    -webkit-animation-delay: 1s, 1s;\n    animation-delay: 1s, 1s;\n    }}\n    .emoji:nth-of-type(2) {{\n    left: 20%;\n    -webkit-animation-delay: 6s, 0.5s;\n    animation-delay: 6s, 0.5s;\n    }}\n    .emoji:nth-of-type(3) {{\n    left: 30%;\n    -webkit-animation-delay: 4s, 2s;\n    animation-delay: 4s, 2s;\n    }}\n    .emoji:nth-of-type(4) {{\n    left: 40%;\n    -webkit-animation-delay: 2s, 2s;\n    animation-delay: 2s, 2s;\n    }}\n    .emoji:nth-of-type(5) {{\n    left: 50%;\n    -webkit-animation-delay: 8s, 3s;\n    animation-delay: 8s, 3s;\n    }}\n    .emoji:nth-of-type(6) {{\n    left: 60%;\n    -webkit-animation-delay: 6s, 2s;\n    animation-delay: 6s, 2s;\n    }}\n    .emoji:nth-of-type(7) {{\n    left: 70%;\n    -webkit-animation-delay: 2.5s, 1s;\n    animation-delay: 2.5s, 1s;\n    }}\n    .emoji:nth-of-type(8) {{\n    left: 80%;\n    -webkit-animation-delay: 1s, 0s;\n    animation-delay: 1s, 0s;\n    }}\n    .emoji:nth-of-type(9) {{\n    left: 90%;\n    -webkit-animation-delay: 3s, 1.5s;\n    animation-delay: 3s, 1.5s;\n    }}\n\n    &lt;/style&gt;\n    \"\"\",\n        unsafe_allow_html=True,\n    )\n\n    st.write(\n        f\"\"\"\n    &lt;!--get emojis from https://getemoji.com--&gt;\n    &lt;div class=\"emojis\"&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n            {emoji}\n        &lt;/div&gt;\n    &lt;/div&gt;\n    \"\"\",\n        unsafe_allow_html=True,\n    )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.let_it_rain import rain # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/let_it_rain/#examples","title":"Examples","text":""},{"location":"extras/let_it_rain/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    rain(\n        emoji=\"\ud83c\udf88\",\n        font_size=54,\n        falling_speed=5,\n        animation_length=\"infinite\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/mandatory_date_range/","title":"\ud83d\udcc5\u00a0\u00a0Mandatory Date Range Picker","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/mandatory_date_range/#summary","title":"Summary","text":"<p>Just like st.date_input, but enforces that it always and only returns a start and end date, even if the user has only selected one of the dates. Until the user selects both dates, the app will not run.</p>"},{"location":"extras/mandatory_date_range/#functions","title":"Functions","text":""},{"location":"extras/mandatory_date_range/#date_range_picker","title":"<code>date_range_picker</code>","text":"<p>Working with date_input with a date range is frustrating becuase if you're assuming you will get a start and end date out of it, your code can break (not to mention your type hints), because if a user clicks on just one date, the app will go ahead and run with a single output. This widget enforces a start and end date being selected, and will stop the app if only one is chosen.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Title of the date widget</p> required <code>default_start</code> <code>Optional[date]</code> <p>Default start date. Defaults to None.</p> <code>None</code> <code>default_end</code> <code>Optional[date]</code> <p>Default end date. Defaults to None.</p> <code>None</code> <code>min_date</code> <code>Optional[date]</code> <p>Minimum date. Defaults to None.</p> <code>None</code> <code>max_date</code> <code>Optional[date]</code> <p>Maximum date. Defaults to None.</p> <code>None</code> <code>error_message</code> <code>str</code> <p>Error message when only one date is chosen. Defaults to \"Please select start and end date\".</p> <code>'Please select start and end date'</code> <code>key</code> <code>Optional[str]</code> <p>Widget key. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[date, date]</code> <p>Tuple[date, date]: Start and end date chosen in the widget</p> Source code in <code>src/streamlit_extras/mandatory_date_range/__init__.py</code> <pre><code>@extra\ndef date_range_picker(\n    title: str,\n    default_start: Optional[date] = None,\n    default_end: Optional[date] = None,\n    min_date: Optional[date] = None,\n    max_date: Optional[date] = None,\n    error_message: str = \"Please select start and end date\",\n    key: Optional[str] = None,\n) -&gt; Tuple[date, date]:\n    \"\"\"\n    Working with date_input with a date range is frustrating becuase if you're\n    assuming you will get a start and end date out of it, your code can break (not\n    to mention your type hints), because if a user clicks on just one date, the app\n    will go ahead and run with a single output. This widget enforces a start and\n    end date being selected, and will stop the app if only one is chosen.\n\n    Args:\n        title (str): Title of the date widget\n        default_start (Optional[date], optional): Default start date. Defaults to None.\n        default_end (Optional[date], optional): Default end date. Defaults to None.\n        min_date (Optional[date], optional): Minimum date. Defaults to None.\n        max_date (Optional[date], optional): Maximum date. Defaults to None.\n        error_message (str, optional): Error message when only one date is chosen.\n            Defaults to \"Please select start and end date\".\n        key (Optional[str], optional): Widget key. Defaults to None.\n\n    Returns:\n        Tuple[date, date]: Start and end date chosen in the widget\n    \"\"\"\n\n    if default_start is None:\n        default_start = date.today() - timedelta(days=30)\n    if default_end is None:\n        default_end = date.today()\n\n    val = st.date_input(\n        title,\n        value=[default_start, default_end],\n        min_value=min_date,\n        max_value=max_date,\n        key=key,\n    )\n    try:\n        start_date, end_date = cast(Tuple[date, date], val)\n    except ValueError:\n        st.error(error_message)\n        st.stop()\n\n    return start_date, end_date\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.mandatory_date_range import date_range_picker # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/mandatory_date_range/#examples","title":"Examples","text":""},{"location":"extras/mandatory_date_range/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    st.write(\n        \"\"\"\n        This is an example of a date range picker that *always* returns a start and\n        end date, even if the user has only selected one of the dates. Until the\n        user selects both dates, the app will not run.\n        \"\"\"\n    )\n    result = date_range_picker(\"Select a date range\")\n    st.write(\"Result:\", result)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/markdownlit/","title":"\u303d\ufe0f\u00a0\u00a0Markdownlit","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/markdownlit/#summary","title":"Summary","text":"<p>markdownlit adds a set of lit Markdown commands for your Streamlit apps!     Note you can now use colored text in markdown with native Streamlit, check     out the docs!</p>"},{"location":"extras/markdownlit/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/markdownlit/#examples","title":"Examples","text":""},{"location":"extras/markdownlit/#example_link_and_colors","title":"<code>example_link_and_colors</code>","text":"<pre><code>def example_link_and_colors():\n    mdlit(\n        \"\"\"Tired from [default links](https://extras.streamlit.app)?\n    Me too! Discover Markdownlit's `@()` operator. Just insert a link and it\n    will figure a nice icon and label for you!\n    Example: @(https://extras.streamlit.app)... better, right? You can\n    also @(\ud83c\udf50)(manually set the label if you want)(https://extras.streamlit.app)\n    btw, and play with a [red]beautiful[/red] [blue]set[/blue] [orange]of[/orange]\n    [violet]colors[/violet]. Another perk is those beautiful arrows -&gt; &lt;-\n    \"\"\"\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/markdownlit/#example_collapsible_content","title":"<code>example_collapsible_content</code>","text":"<pre><code>def example_collapsible_content():\n    mdlit(\n        textwrap.dedent(\n            \"\"\"\n    ??? Bonus\n        @(\ud83c\udf81)(A very insightful tutorial)(https://www.youtube.com/watch?v=dQw4w9WgXcQ)\n    \"\"\"\n        )\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/mention/","title":"\ud83e\udef5\u00a0\u00a0Mentions","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/mention/#summary","title":"Summary","text":"<p>Create nice links with icons, like Notion mentions!</p>"},{"location":"extras/mention/#functions","title":"Functions","text":""},{"location":"extras/mention/#mention","title":"<code>mention</code>","text":"<p>Mention a link with a label and icon.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Label to use in the mention</p> required <code>icon</code> <code>str</code> <p>Icon to use. Can be an emoji or a URL. Default '\ud83d\udd17'</p> <code>'\ud83d\udd17'</code> <code>url</code> <code>str</code> <p>Target URL of the mention</p> required <code>write</code> <code>bool</code> <p>Writes the mention directly. If False, returns the raw HTML.           Useful if mention is used inline.</p> <code>True</code> Source code in <code>src/streamlit_extras/mention/__init__.py</code> <pre><code>@extra\ndef mention(label: str, url: str, icon: str = \"\ud83d\udd17\", write: bool = True):\n    \"\"\"Mention a link with a label and icon.\n\n    Args:\n        label (str): Label to use in the mention\n        icon (str): Icon to use. Can be an emoji or a URL. Default '\ud83d\udd17'\n        url (str): Target URL of the mention\n        write (bool): Writes the mention directly. If False, returns the raw HTML.\n                      Useful if mention is used inline.\n    \"\"\"\n\n    if icon.lower() == \"github\":\n        icon = GITHUB_ICON\n    elif icon.lower() == \"notion\":\n        icon = NOTION_ICON\n    elif icon.lower() == \"twitter\":\n        icon = TWITTER_ICON\n    elif icon.lower() == \"streamlit\":\n        icon = STREAMLIT_ICON\n\n    if validate_url(icon):\n        icon_html = img(\n            src=icon,\n            style=\"width:1em;height:1em;vertical-align:-0.15em;border-radius:3px;margin-right:0.3em\",\n        )\n    else:\n        icon_html = icon + \"\u00a0\u00a0\"\n\n    mention_html = a(\n        contenteditable=False,\n        href=url,\n        rel=\"noopener noreferrer\",\n        style=\"color:inherit;text-decoration:inherit; height:auto!important\",\n        target=\"_blank\",\n    )(\n        span(),\n        icon_html,\n        span(\n            style=(\n                \"border-bottom:0.05em solid\"\n                \" rgba(55,53,47,0.25);font-weight:500;flex-shrink:0\"\n            )\n        )(label),\n        span(),\n    )\n\n    html = STYLE_HTML + str(mention_html)\n    if write:\n        st.write(html, unsafe_allow_html=True)\n    else:\n        return html\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.mention import mention # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/mention/#examples","title":"Examples","text":""},{"location":"extras/mention/#example_1","title":"<code>example_1</code>","text":"<pre><code>def example_1():\n    mention(\n        label=\"An awesome Streamlit App\",\n        icon=\"streamlit\",  # Some icons are available... like Streamlit!\n        url=\"https://extras.streamlitapp.com\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/mention/#example_2","title":"<code>example_2</code>","text":"<pre><code>def example_2():\n    mention(\n        label=\"streamlit-extras\",\n        icon=\"\ud83e\udea2\",  # You can also just use an emoji\n        url=\"https://github.com/arnaudmiribel/streamlit-extras\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/mention/#example_3","title":"<code>example_3</code>","text":"<pre><code>def example_3():\n    mention(\n        label=\"example-app-cv-model\",\n        icon=\"github\",  # GitHub is also featured!\n        url=\"https://github.com/streamlit/example-app-cv-model\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/mention/#example_4","title":"<code>example_4</code>","text":"<pre><code>def example_4():\n    mention(\n        label=\"That page somewhere in Notion\",\n        icon=\"notion\",  # Notion is also featured!\n        url=\"https://notion.so\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/mention/#example_5","title":"<code>example_5</code>","text":"<pre><code>def example_5():\n    inline_mention = mention(\n        label=\"streamlit\",\n        icon=\"twitter\",  # Twitter is also featured!\n        url=\"https://www.twitter.com/streamlit\",\n        write=False,\n    )\n\n    st.write(\n        f\"Here's how to use the mention inline:  {inline_mention}. Cool\" \" right?\",\n        unsafe_allow_html=True,\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/metric_cards/","title":"\u2660\ufe0f\u00a0\u00a0Metric Cards","text":"<p>Submitted by Chanin Nantasenamat</p>"},{"location":"extras/metric_cards/#summary","title":"Summary","text":"<p>Restyle metrics as cards</p>"},{"location":"extras/metric_cards/#functions","title":"Functions","text":""},{"location":"extras/metric_cards/#style_metric_cards","title":"<code>style_metric_cards</code>","text":"<p>Applies a custom style to st.metrics in the page</p> <p>Parameters:</p> Name Type Description Default <code>background_color</code> <code>str</code> <p>Background color. Defaults to \"#FFF\".</p> <code>'#FFF'</code> <code>border_size_px</code> <code>int</code> <p>Border size in pixels. Defaults to 1.</p> <code>1</code> <code>border_color</code> <code>str</code> <p>Border color. Defaults to \"#CCC\".</p> <code>'#CCC'</code> <code>border_radius_px</code> <code>int</code> <p>Border radius in pixels. Defaults to 5.</p> <code>5</code> <code>border_left_color</code> <code>str</code> <p>Borfer left color. Defaults to \"#9AD8E1\".</p> <code>'#9AD8E1'</code> <code>box_shadow</code> <code>bool</code> <p>Whether a box shadow is applied. Defaults to True.</p> <code>True</code> Source code in <code>src/streamlit_extras/metric_cards/__init__.py</code> <pre><code>@extra\ndef style_metric_cards(\n    background_color: str = \"#FFF\",\n    border_size_px: int = 1,\n    border_color: str = \"#CCC\",\n    border_radius_px: int = 5,\n    border_left_color: str = \"#9AD8E1\",\n    box_shadow: bool = True,\n) -&gt; None:\n    \"\"\"\n    Applies a custom style to st.metrics in the page\n\n    Args:\n        background_color (str, optional): Background color. Defaults to \"#FFF\".\n        border_size_px (int, optional): Border size in pixels. Defaults to 1.\n        border_color (str, optional): Border color. Defaults to \"#CCC\".\n        border_radius_px (int, optional): Border radius in pixels. Defaults to 5.\n        border_left_color (str, optional): Borfer left color. Defaults to \"#9AD8E1\".\n        box_shadow (bool, optional): Whether a box shadow is applied. Defaults to True.\n    \"\"\"\n\n    box_shadow_str = (\n        \"box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15) !important;\"\n        if box_shadow\n        else \"box-shadow: none !important;\"\n    )\n    st.markdown(\n        f\"\"\"\n        &lt;style&gt;\n            div[data-testid=\"stMetric\"],\n            div[data-testid=\"metric-container\"] {{\n                background-color: {background_color};\n                border: {border_size_px}px solid {border_color};\n                padding: 5% 5% 5% 10%;\n                border-radius: {border_radius_px}px;\n                border-left: 0.5rem solid {border_left_color} !important;\n                {box_shadow_str}\n            }}\n        &lt;/style&gt;\n        \"\"\",\n        unsafe_allow_html=True,\n    )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.metric_cards import style_metric_cards # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/metric_cards/#examples","title":"Examples","text":""},{"location":"extras/metric_cards/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    col1, col2, col3 = st.columns(3)\n\n    col1.metric(label=\"Gain\", value=5000, delta=1000)\n    col2.metric(label=\"Loss\", value=5000, delta=-1000)\n    col3.metric(label=\"No Change\", value=5000, delta=0)\n\n    style_metric_cards()\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/no_default_selectbox/","title":"\ud83d\uddf3\ufe0f\u00a0\u00a0No-Default Selectbox","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/no_default_selectbox/#summary","title":"Summary","text":"<p>Just like st.selectbox, but with no default value -- returns None if nothing is selected.</p> <p>Meant to be a solution to https://github.com/streamlit/streamlit/issues/949</p>"},{"location":"extras/no_default_selectbox/#functions","title":"Functions","text":""},{"location":"extras/no_default_selectbox/#selectbox","title":"<code>selectbox</code>","text":"<p>A selectbox that returns None unless the user has explicitly selected one of the options. All arguments are passed to st.selectbox except for <code>no_selection_label</code>, which is used to specify the label of the option that represents no selection.</p> <p>Parameters:</p> Name Type Description Default <code>no_selection_label</code> <code>str</code> <p>The label to use for the no-selection option. Defaults to \"---\".</p> required Source code in <code>src/streamlit_extras/no_default_selectbox/__init__.py</code> <pre><code>@extra\ndef selectbox(*args, **kwargs):\n    \"\"\"\n    A selectbox that returns None unless the user has explicitly selected one of the\n    options. All arguments are passed to st.selectbox except for `no_selection_label`, which is\n    used to specify the label of the option that represents no selection.\n\n    Args:\n        no_selection_label (str): The label to use for the no-selection option. Defaults to \"---\".\n    \"\"\"\n    no_selection_label, _args, _kwargs = _transform_arguments(*args, **kwargs)\n\n    result = st.selectbox(*_args, **_kwargs)\n    if result == no_selection_label:\n        return None\n    return result\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.no_default_selectbox import selectbox # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/no_default_selectbox/#examples","title":"Examples","text":""},{"location":"extras/no_default_selectbox/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    st.write(\n        \"\"\"\n        This is an example of a selectbox that returns None unless the user has\n        explicitly selected one of the options.\n\n        The selectbox below has no default value, so it will return None until the\n        user selects an option.\n        \"\"\"\n    )\n    result = selectbox(\"Select an option\", [\"A\", \"B\", \"C\"])\n    st.write(\"Result:\", result)\n\n    result = selectbox(\n        \"Select an option with different label\",\n        [\"A\", \"B\", \"C\"],\n        no_selection_label=\"&lt;None&gt;\",\n    )\n    st.write(\"Result:\", result)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/row/","title":"\ud83d\udff0\u00a0\u00a0Row Layout","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/row/#summary","title":"Summary","text":"<p>A multi-element horizontal container that places elements in a row.</p>"},{"location":"extras/row/#functions","title":"Functions","text":""},{"location":"extras/row/#row","title":"<code>row</code>","text":"<p>Insert a multi-element, horizontal container into your app.</p> <p>This function inserts a container into your app that can hold a number of elements as defined in the provided spec. Elements can be added to the returned container by calling methods directly on the returned object.</p> <p>Parameters:</p> Name Type Description Default <code>spec</code> <code>SpecType</code> <p>Controls the number and width of cells to insert in the row. Can be one of: * An integer specifying the number of cells. All cells will have equal width in this case. * An iterable of numbers (int or float) that specifies the relative width of each cell. For instance, <code>[0.7, 0.3]</code> creates two cells where the first one occupies 70% of the available width, and the second one occupies 30%. Or, <code>[1, 2, 3]</code> creates three cells where the second one is twice as wide as the first one, and the third one is three times that width.</p> required <code>gap</code> <code>Optional[str]</code> <p>\"small\", \"medium\", or \"large\" The size of the gap between cells, can be \"small\", \"medium\", or \"large\". This parameter specifies the visual space between the elements within the row. Defaults to \"small\".</p> <code>'small'</code> <code>vertical_align</code> <code>Literal['top', 'center', 'bottom']</code> <p>The vertical alignment of the cells in the row. It can be either \"top\", \"center\", or \"bottom\", aligning the contents of each cell accordingly. Defaults to \"top\".</p> <code>'top'</code> <p>Returns:</p> Type Description <code>GridDeltaGenerator</code> <p>grid.GridDeltaGenerator: RowContainer A row container object. Elements can be added to this row by calling methods directly on the returned object.</p> Source code in <code>src/streamlit_extras/row/__init__.py</code> <pre><code>@extra\ndef row(\n    spec: SpecType,\n    gap: Optional[str] = \"small\",\n    vertical_align: Literal[\"top\", \"center\", \"bottom\"] = \"top\",\n) -&gt; grid.GridDeltaGenerator:\n    \"\"\"\n    Insert a multi-element, horizontal container into your app.\n\n    This function inserts a container into your app that can hold\n    a number of elements as defined in the provided spec. Elements can be added\n    to the returned container by calling methods directly on the returned object.\n\n    Args:\n        spec (SpecType): Controls the number and width of cells to insert in the row. Can be one of:\n            * An integer specifying the number of cells. All cells will have equal\n            width in this case.\n            * An iterable of numbers (int or float) that specifies the relative width of\n            each cell. For instance, ``[0.7, 0.3]`` creates two cells where the first\n            one occupies 70% of the available width, and the second one occupies 30%.\n            Or, ``[1, 2, 3]`` creates three cells where the second one is twice\n            as wide as the first one, and the third one is three times that width.\n        gap (Optional[str], optional): \"small\", \"medium\", or \"large\"\n            The size of the gap between cells, can be \"small\", \"medium\", or \"large\".\n            This parameter specifies the visual space between the elements within the row.\n            Defaults to \"small\".\n        vertical_align (Literal[\"top\", \"center\", \"bottom\"], optional): The vertical alignment\n            of the cells in the row. It can be either \"top\", \"center\", or \"bottom\", aligning\n            the contents of each cell accordingly. Defaults to \"top\".\n\n    Returns:\n        grid.GridDeltaGenerator: RowContainer\n            A row container object. Elements can be added to this row by calling methods directly\n            on the returned object.\n    \"\"\"\n    container = stylable_container.stylable_container(\n        key=f\"row_{vertical_align}\",\n        css_styles=[\n            \"\"\"\ndiv[data-testid=\"column\"] &gt; div {\nheight: 100%;\n}\n\"\"\",\n            f\"\"\"\ndiv[data-testid=\"column\"] &gt; div &gt; div[data-testid=\"stVerticalBlock\"] &gt; div.element-container {{\n    {\"margin-top: auto;\" if vertical_align in [\"center\", \"bottom\"] else \"\"}\n    {\"margin-bottom: auto;\" if vertical_align == \"center\" else \"\"}\n}}\n\"\"\",\n        ],\n    )\n\n    return grid.GridDeltaGenerator(parent_dg=container, spec=[spec], gap=gap)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.row import row # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/row/#examples","title":"Examples","text":""},{"location":"extras/row/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    random_df = pd.DataFrame(np.random.randn(20, 3), columns=[\"a\", \"b\", \"c\"])\n\n    row1 = row(2, vertical_align=\"center\")\n    row1.dataframe(random_df, use_container_width=True)\n    row1.line_chart(random_df, use_container_width=True)\n\n    row2 = row([2, 4, 1], vertical_align=\"bottom\")\n\n    row2.selectbox(\"Select Country\", [\"Germany\", \"Italy\", \"Japan\", \"USA\"])\n    row2.text_input(\"Your name\")\n    row2.button(\"Send\", use_container_width=True)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/sandbox/","title":"\ud83d\udce6\u00a0\u00a0Stlite Sandbox","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/sandbox/#summary","title":"Summary","text":"<p>Execute untrusted Streamlit code in a sandboxed environment.</p>"},{"location":"extras/sandbox/#functions","title":"Functions","text":""},{"location":"extras/sandbox/#sandbox","title":"<code>sandbox</code>","text":"<p>Execute untrusted Streamlit code in a sandboxed environment.</p> <p>This function allows you to execute untrusted Streamlit code inside the user's web browser by using stlite (https://github.com/whitphx/stlite) instead of the App server. This is useful for apps that generate  and execute Streamlit (or Python) code at runtime based on some user instructions. Doing this inside the main Streamlit app would be unsafe since the user could execute arbitrary code on the server.</p> <p>There are a few limitations to this approach: * stlite does not support the full set of Streamlit features. See the stlite documentation   for more details on limitations: https://github.com/whitphx/stlite#limitations * Since the code is executed inside the user's browser, it cannot access any files, session state,   or other functionalities of the server. * The available compute resource depend on the user's machine. So, this is not suited for   heavy computations.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str | Callable[[], None]</code> <p>The code to execute. This can either be a string containing the code or a function. If a function is passed, the source code will be extracted automatically. The function is required to be fully self-contained and not reference any variables outside of its scope.</p> required <code>stlite_version</code> <code>str | None</code> <p>The version of stlite to use. If None, the latest version will be used.. Defaults to None.</p> <code>None</code> <code>requirements</code> <code>List[str] | None</code> <p>A list of Python packages to install before executing the code. If None, the following packages will be installed: pandas, numpy, plotly, altair.</p> <code>None</code> <code>height</code> <code>int</code> <p>The height of the embedded app in pixels. Defaults to 700.</p> <code>700</code> <code>scrolling</code> <code>bool</code> <p>Whether to allow scrolling inside the embedded app. Defaults to False.</p> <code>False</code> Source code in <code>src/streamlit_extras/sandbox/__init__.py</code> <pre><code>@extra\ndef sandbox(\n    code: str | Callable[[], None],\n    stlite_version: str | None = None,\n    requirements: List[str] | None = None,\n    height: int = 700,\n    scrolling: bool = False,\n) -&gt; None:\n    \"\"\"\n    Execute untrusted Streamlit code in a sandboxed environment.\n\n    This function allows you to execute untrusted Streamlit code inside the user's web browser\n    by using stlite (https://github.com/whitphx/stlite) instead of the App server. This is useful\n    for apps that generate  and execute Streamlit (or Python) code at runtime based on some user\n    instructions. Doing this inside the main Streamlit app would be unsafe since the user could\n    execute arbitrary code on the server.\n\n    There are a few limitations to this approach:\n    * stlite does not support the full set of Streamlit features. See the stlite documentation\n      for more details on limitations: https://github.com/whitphx/stlite#limitations\n    * Since the code is executed inside the user's browser, it cannot access any files, session state,\n      or other functionalities of the server.\n    * The available compute resource depend on the user's machine. So, this is not suited for\n      heavy computations.\n\n    Args:\n      code (str | Callable[[], None]): The code to execute. This can either be a string containing the code or a function.\n        If a function is passed, the source code will be extracted automatically. The function\n        is required to be fully self-contained and not reference any variables outside of its\n        scope.\n      stlite_version (str | None, optional): The version of stlite to use.\n        If None, the latest version will be used.. Defaults to None.\n      requirements (List[str] | None, optional): A list of Python packages\n        to install before executing the code. If None, the following\n        packages will be installed: pandas, numpy, plotly, altair.\n      height (int, optional): The height of the embedded app in pixels. Defaults to 700.\n      scrolling (bool, optional): Whether to allow scrolling inside the embedded app.\n        Defaults to False.\n    \"\"\"\n\n    stlite_css_url = \"https://cdn.jsdelivr.net/npm/@stlite/mountable/build/stlite.css\"\n    stlite_js_url = \"https://cdn.jsdelivr.net/npm/@stlite/mountable/build/stlite.js\"\n\n    if stlite_version is not None:\n        stlite_css_url = f\"https://cdn.jsdelivr.net/npm/@stlite/mountable@{stlite_version}/build/stlite.css\"\n        stlite_js_url = f\"https://cdn.jsdelivr.net/npm/@stlite/mountable@{stlite_version}/build/stlite.js\"\n\n    if inspect.isfunction(code):\n        function_name = code.__name__\n        code = textwrap.dedent(inspect.getsource(code))\n        code += f\"\\n\\n{function_name}()\"\n\n    if not requirements:\n        requirements = [\n            \"pandas\",\n            \"numpy\",\n            \"plotly\",\n            \"altair\",\n        ]\n    html(\n        f\"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    /&gt;\n    &lt;title&gt;Embedded Streamlit App&lt;/title&gt;\n    &lt;link\n      rel=\"stylesheet\"\n      href=\"{stlite_css_url}\"\n    /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script src=\"{stlite_js_url}\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      if (window.location.search !== \"?embed=true{\"&amp;embed_options=disable_scrolling\" if scrolling is False else \"\"}\") {{\n        window.location.search = \"?embed=true{\"&amp;embed_options=disable_scrolling\" if scrolling is False else \"\"}\";\n      }}\n      stlite.mount(\n  {{\n    requirements: [\"{'\",\"'.join(requirements)}\"], // Packages to install\n    entrypoint: \"streamlit_app.py\",\n    files: {{\n      \"streamlit_app.py\": `\nimport streamlit as st\n\nst.markdown('&lt;style&gt;[data-baseweb~=\"modal\"]{{visibility: hidden;}}&lt;/style&gt;', unsafe_allow_html=True,)\n\n{code}\n`,\n    }},\n  }},\n        document.getElementById(\"root\")\n      );\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n        \"\"\",\n        height=height,\n        scrolling=scrolling,\n    )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.sandbox import sandbox # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/sandbox/#examples","title":"Examples","text":""},{"location":"extras/sandbox/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    def embedded_app():\n        import numpy as np\n        import pandas as pd\n        import plotly.express as px\n        import streamlit as st\n\n        @st.cache_data\n        def get_data():\n            dates = pd.date_range(start=\"01-01-2020\", end=\"01-01-2023\")\n            data = np.random.randn(len(dates), 1).cumsum(axis=0)\n            return pd.DataFrame(data, index=dates, columns=[\"Value\"])\n\n        data = get_data()\n\n        value = st.slider(\n            \"Select a range of values\",\n            int(data.min()),\n            int(data.max()),\n            (int(data.min()), int(data.max())),\n        )\n        filtered_data = data[(data[\"Value\"] &gt;= value[0]) &amp; (data[\"Value\"] &lt;= value[1])]\n        st.plotly_chart(px.line(filtered_data, y=\"Value\"))\n\n    sandbox(embedded_app)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/st_keyup/","title":"\ud83d\udd11\u00a0\u00a0Keyup text input","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/st_keyup/#summary","title":"Summary","text":"<p>A text input that updates with every key press</p>"},{"location":"extras/st_keyup/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/st_keyup/#examples","title":"Examples","text":""},{"location":"extras/st_keyup/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    st.write(\"## Notice how the output doesn't update until you hit enter\")\n    out = st.text_input(\"Normal text input\")\n    st.write(out)\n    st.write(\"## Notice how the output updates with every key you press\")\n    out2 = st_keyup(\"Keyup input\")\n    st.write(out2)\n</code></pre>"},{"location":"extras/st_keyup/#example_with_debounce","title":"<code>example_with_debounce</code>","text":"<pre><code>def example_with_debounce():\n    st.write(\"## Notice how the output doesn't update until 500ms has passed\")\n    out = st_keyup(\"Keyup with debounce\", debounce=500)\n    st.write(out)\n</code></pre>"},{"location":"extras/stateful_button/","title":"\ud83d\udd1b\u00a0\u00a0Stateful Button","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/stateful_button/#summary","title":"Summary","text":"<p>Button that keeps track of its state, so that it works as a toggle button</p>"},{"location":"extras/stateful_button/#functions","title":"Functions","text":""},{"location":"extras/stateful_button/#button","title":"<code>button</code>","text":"<p>Works just like a normal streamlit button, but it remembers its state, so that it works as a toggle button. If you click it, it will be pressed, and if you click it again, it will be unpressed. Args and output are the same as for st.button</p> Source code in <code>src/streamlit_extras/stateful_button/__init__.py</code> <pre><code>@extra\ndef button(*args, key=None, **kwargs):\n    \"\"\"\n    Works just like a normal streamlit button, but it remembers its state, so that\n    it works as a toggle button. If you click it, it will be pressed, and if you click\n    it again, it will be unpressed. Args and output are the same as for\n    [st.button](https://docs.streamlit.io/library/api-reference/widgets/st.button)\n    \"\"\"\n\n    if key is None:\n        raise ValueError(\"Must pass key\")\n\n    if key not in st.session_state:\n        st.session_state[key] = False\n\n    if \"type\" not in kwargs:\n        kwargs[\"type\"] = \"primary\" if st.session_state[key] else \"secondary\"\n\n    if st.button(*args, **kwargs):\n        st.session_state[key] = not st.session_state[key]\n        st.experimental_rerun()\n\n    return st.session_state[key]\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.stateful_button import button # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stateful_button/#examples","title":"Examples","text":""},{"location":"extras/stateful_button/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    if button(\"Button 1\", key=\"button1\"):\n        if button(\"Button 2\", key=\"button2\"):\n            if button(\"Button 3\", key=\"button3\"):\n                st.write(\"All 3 buttons are pressed\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/stateful_chat/","title":"\ud83d\udcac\u00a0\u00a0Stateful Chat","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/stateful_chat/#summary","title":"Summary","text":"<p>A chat container that automatically keeps track of the chat history.</p>"},{"location":"extras/stateful_chat/#functions","title":"Functions","text":""},{"location":"extras/stateful_chat/#add_message","title":"<code>add_message</code>","text":"<p>Adds a chat message to the chat container. This command can only be used inside the <code>chat</code> container. The message will be displayed in the UI and added to the chat history so that the same message will be automatically displayed on reruns.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Literal['user', 'assistant'] | str</code> <p>The name of the message author. Can be \u201cuser\u201d or \u201cassistant\u201d to enable preset styling and avatars. Currently, the name is not shown in the UI but is only set as an accessibility label. For accessibility reasons, you should not use an empty string.</p> required <code>avatar</code> <code>str | AtomicImage | None</code> <p>The avatar shown next to the message. Can be anything that is supported by the <code>avatar</code> parameter of <code>st.chat_message</code>. Defaults to None.</p> <code>None</code> <code>*args</code> <code>Any</code> <p>The content of the message. This can be any number of elements that are supported by <code>st.write</code> as well as generator functions to stream content to the UI.</p> <code>()</code> Source code in <code>src/streamlit_extras/stateful_chat/__init__.py</code> <pre><code>@extra\ndef add_message(\n    name: Literal[\"user\", \"assistant\"] | str,\n    *args: Any,\n    avatar: str | AtomicImage | None = None,\n):\n    \"\"\"\n    Adds a chat message to the chat container.\n    This command can only be used inside the `chat` container. The message\n    will be displayed in the UI and added to the chat history so that the same\n    message will be automatically displayed on reruns.\n\n    Args:\n        name (Literal[\"user\", \"assistant\"] | str):\n            The name of the message author. Can be \u201cuser\u201d or \u201cassistant\u201d to\n            enable preset styling and avatars.\n            Currently, the name is not shown in the UI but is only set as an\n            accessibility label. For accessibility reasons, you should not use\n            an empty string.\n        avatar (str | AtomicImage | None, optional):\n            The avatar shown next to the message. Can be anything that is supported by\n            the `avatar` parameter of `st.chat_message`. Defaults to None.\n        *args (Any):\n            The content of the message. This can be any number of elements that are supported by\n            `st.write` as well as generator functions to stream content to the UI.\n    \"\"\"\n    active_dg = _active_dg()\n\n    if not hasattr(active_dg, \"chat_history\"):\n        raise StreamlitAPIException(\n            \"The `add_message` command can only be used inside a `chat` container.\"\n        )\n\n    displayed_elements = _display_message(name, *args, avatar=avatar)\n    active_dg.chat_history.append(\n        ChatMessage(\n            author=name,\n            avatar=avatar,\n            content=displayed_elements,\n        )\n    )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.stateful_chat import add_message # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stateful_chat/#chat","title":"<code>chat</code>","text":"<p>Insert a stateful chat container into your app. This chat container automatically keeps track of the chat history when you use the <code>add_message</code> command to add messages to the chat.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key that is used to keep track of the chat history in session state. Defaults to \"chat_messages\".</p> <code>'chat_messages'</code> <p>Returns:</p> Name Type Description <code>DeltaGenerator</code> <code>'DeltaGenerator'</code> <p>Chat Container The chat container that can be used together with <code>add_message</code> to automatically keep track of the chat history.</p> Source code in <code>src/streamlit_extras/stateful_chat/__init__.py</code> <pre><code>@extra\ndef chat(key: str = \"chat_messages\") -&gt; \"DeltaGenerator\":\n    \"\"\"\n    Insert a stateful chat container into your app.\n    This chat container automatically keeps track of the chat history when you use\n    the `add_message` command to add messages to the chat.\n\n    Args:\n        key (str, optional): The key that is used to keep track of the chat history in session state.\n            Defaults to \"chat_messages\".\n\n    Returns:\n        DeltaGenerator: Chat Container\n            The chat container that can be used together with `add_message` to automatically\n            keep track of the chat history.\n    \"\"\"\n\n    chat_container = st.container()\n\n    if key not in st.session_state:\n        st.session_state[key] = []\n    chat_history: List[ChatMessage] = st.session_state[key]\n\n    chat_container.chat_history = chat_history  # type: ignore\n\n    with chat_container:\n        for message in chat_history:\n            _display_message(\n                message[\"author\"], *message[\"content\"], avatar=message[\"avatar\"]\n            )\n\n    return chat_container\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.stateful_chat import chat # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stateful_chat/#examples","title":"Examples","text":""},{"location":"extras/stateful_chat/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    with chat(key=\"my_chat\"):\n        if prompt := st.chat_input():\n            add_message(\"user\", prompt, avatar=\"\ud83e\uddd1\u200d\ud83d\udcbb\")\n\n            def stream_echo():\n                for word in prompt.split():\n                    yield word + \" \"\n                    time.sleep(0.15)\n\n            add_message(\"assistant\", \"Echo: \", stream_echo, avatar=\"\ud83e\udd9c\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/stodo/","title":"\u2714\ufe0f\u00a0\u00a0To-do items","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/stodo/#summary","title":"Summary","text":"<p>Simple Python function to create to-do items in Streamlit!</p>"},{"location":"extras/stodo/#functions","title":"Functions","text":""},{"location":"extras/stodo/#to_do","title":"<code>to_do</code>","text":"<p>Create a to_do item</p> <p>Parameters:</p> Name Type Description Default <code>st_commands</code> <code>_type_</code> <p>List of (cmd, args) where cmd is a streamlit command and args are the arguments of the command</p> required <code>checkbox_id</code> <code>str</code> <p>Use as a key to the checkbox</p> required <p>Returns:</p> Name Type Description <code>None</code> <p>Prints the to do list</p> Source code in <code>src/streamlit_extras/stodo/__init__.py</code> <pre><code>@extra\ndef to_do(st_commands, checkbox_id):\n    \"\"\"Create a to_do item\n\n    Args:\n        st_commands (_type_): List of (cmd, args) where cmd is a\n            streamlit command and args are the arguments of the command\n        checkbox_id (str): Use as a key to the checkbox\n\n    Returns:\n        None: Prints the to do list\n    \"\"\"\n    cols = st.columns((1, 20))\n    done = cols[0].checkbox(\" \", key=checkbox_id)\n    if done:\n        for (cmd, *args) in st_commands:\n            with cols[1]:\n                if cmd == st.write:\n                    text = args[0]\n                    cols[1].write(\n                        \"&lt;s style='color: rgba(49, 51, 63, 0.4)'&gt;\" f\" {text} &lt;/s&gt;\",\n                        unsafe_allow_html=True,\n                    )\n                else:\n                    if cmd in (\n                        st.slider,\n                        st.button,\n                        st.checkbox,\n                        st.time_input,\n                        st.color_picker,\n                        st.selectbox,\n                        st.camera_input,\n                        st.radio,\n                        st.date_input,\n                        st.multiselect,\n                        st.text_area,\n                        st.text_input,\n                    ):\n                        cmd(*args, disabled=True)\n                    else:\n                        cmd(*args)\n\n    else:\n        for (cmd, *args) in st_commands:\n            with cols[1]:\n                if cmd == st.write:\n                    st.write(*args, unsafe_allow_html=True)\n                else:\n\n                    cmd(*args)\n    st.write(\"\")\n    return done\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.stodo import to_do # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stodo/#examples","title":"Examples","text":""},{"location":"extras/stodo/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    to_do(\n        [(st.write, \"\u2615 Take my coffee\")],\n        \"coffee\",\n    )\n    to_do(\n        [(st.write, \"\ud83e\udd5e Have a nice breakfast\")],\n        \"pancakes\",\n    )\n    to_do(\n        [(st.write, \":train: Go to work!\")],\n        \"work\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/stoggle/","title":"\u27a1\ufe0f\u00a0\u00a0Toggle button","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/stoggle/#summary","title":"Summary","text":"<p>Toggle button just like in Notion!</p>"},{"location":"extras/stoggle/#functions","title":"Functions","text":""},{"location":"extras/stoggle/#stoggle","title":"<code>stoggle</code>","text":"<p>Displays a toggle widget in Streamlit</p> <p>Parameters:</p> Name Type Description Default <code>summary</code> <code>str</code> <p>Summary of the toggle (always shown)</p> required <code>content</code> <code>str</code> <p>Content shown after toggling</p> required Source code in <code>src/streamlit_extras/stoggle/__init__.py</code> <pre><code>@extra\ndef stoggle(summary: str, content: str):\n    \"\"\"\n    Displays a toggle widget in Streamlit\n\n    Args:\n        summary (str): Summary of the toggle (always shown)\n        content (str): Content shown after toggling\n    \"\"\"\n\n    st.write(\n        str(\n            div(\n                style=styles(\n                    line_height=1.8,\n                )\n            )(details(smry(summary), p(content)))\n        ),\n        unsafe_allow_html=True,\n    )\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.stoggle import stoggle # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stoggle/#examples","title":"Examples","text":""},{"location":"extras/stoggle/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    stoggle(\n        \"Click me!\",\n        \"\"\"\ud83e\udd77 Surprise! Here's some additional content\"\"\",\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/streaming_write/","title":"\ud83c\udf0a\u00a0\u00a0Streaming Write","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/streaming_write/#summary","title":"Summary","text":"<p>Drop-in replacement for <code>st.write</code> with streaming support.</p>"},{"location":"extras/streaming_write/#functions","title":"Functions","text":""},{"location":"extras/streaming_write/#write","title":"<code>write</code>","text":"<p>Drop-in replacement for <code>st.write</code> with streaming support.</p> <p>This function is a drop-in replacement for <code>st.write</code> that adds additional capabilities: * Supports streaming data via generator functions. * Executes callable objects (e.g. functions) and writes the return value.</p> Source code in <code>src/streamlit_extras/streaming_write/__init__.py</code> <pre><code>@extra\ndef write(*args: Any, unsafe_allow_html: bool = False, **kwargs) -&gt; List[Any]:\n    \"\"\"Drop-in replacement for `st.write` with streaming support.\n\n    This function is a drop-in replacement for `st.write` that adds additional capabilities:\n    * Supports streaming data via generator functions.\n    * Executes callable objects (e.g. functions) and writes the return value.\n    \"\"\"\n    if not args:\n        return []\n\n    written_content: List[Any] = []\n    string_buffer: List[str] = []\n\n    def flush_buffer():\n        if string_buffer:\n            text_content = \" \".join(string_buffer)\n            text_container = st.empty()\n            text_container.markdown(text_content)\n            written_content.append(text_content)\n            string_buffer[:] = []\n\n    for arg in args:\n        # Order matters!\n        if isinstance(arg, str):\n            string_buffer.append(arg)\n        elif callable(arg) or inspect.isgenerator(arg):\n            flush_buffer()\n            if inspect.isgeneratorfunction(arg) or inspect.isgenerator(arg):\n                # This causes greyed out effect since this element is missing on rerun:\n                stream_container = None\n                streamed_response = \"\"\n\n                def flush_stream_response():\n                    nonlocal streamed_response\n                    nonlocal stream_container\n                    if streamed_response and stream_container:\n                        stream_container.write(\n                            streamed_response,\n                            unsafe_allow_html=unsafe_allow_html,\n                            **kwargs,\n                        )\n                        written_content.append(streamed_response)\n                        stream_container = None\n                        streamed_response = \"\"\n\n                generator = arg() if inspect.isgeneratorfunction(arg) else arg\n                for chunk in generator:\n                    if isinstance(chunk, str):\n                        first_text = False\n                        if not stream_container:\n                            stream_container = st.empty()\n                            first_text = True\n                        streamed_response += chunk\n                        # Only add the streaming symbol on the second text chunk\n                        stream_container.write(\n                            streamed_response + (\"\" if first_text else \" \u258c\"),\n                            unsafe_allow_html=unsafe_allow_html,\n                            **kwargs,\n                        )\n                    elif callable(chunk):\n                        flush_stream_response()\n                        chunk()\n                        written_content.append(chunk)\n                    else:\n                        flush_stream_response()\n                        st.write(chunk, unsafe_allow_html=unsafe_allow_html, **kwargs)\n                        written_content.append(chunk)\n                flush_stream_response()\n\n            else:\n                return_value = arg()\n                written_content.append(arg)\n                if return_value is not None:\n                    flush_buffer()\n                    st.write(\n                        return_value, unsafe_allow_html=unsafe_allow_html, **kwargs\n                    )\n        else:\n            flush_buffer()\n            st.write(arg, unsafe_allow_html=unsafe_allow_html, **kwargs)\n            written_content.append(arg)\n    flush_buffer()\n    return written_content\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.streaming_write import write # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/streaming_write/#examples","title":"Examples","text":""},{"location":"extras/streaming_write/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    def stream_example():\n        for word in _LOREM_IPSUM.split():\n            yield word + \" \"\n            time.sleep(0.1)\n\n        # Also supports any other object supported by `st.write`\n        yield pd.DataFrame(\n            np.random.randn(5, 10),\n            columns=[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"],\n        )\n\n        for word in _LOREM_IPSUM.split():\n            yield word + \" \"\n            time.sleep(0.05)\n\n    if st.button(\"Stream data\"):\n        write(stream_example)\n</code></pre>"},{"location":"extras/stylable_container/","title":"\ud83c\udfa8\u00a0\u00a0Styleable Container","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/stylable_container/#summary","title":"Summary","text":"<p>A container that allows to style its child elements using CSS.</p>"},{"location":"extras/stylable_container/#functions","title":"Functions","text":""},{"location":"extras/stylable_container/#stylable_container","title":"<code>stylable_container</code>","text":"<p>Insert a container into your app which you can style using CSS. This is useful to style specific elements in your app.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key associated with this container. This needs to be unique since all styles will be applied to the container with this key.</p> required <code>css_styles</code> <code>str | List[str]</code> <p>The CSS styles to apply to the container elements. This can be a single CSS block or a list of CSS blocks.</p> required <p>Returns:</p> Name Type Description <code>DeltaGenerator</code> <code>'DeltaGenerator'</code> <p>A container object. Elements can be added to this container using either the 'with' notation or by calling methods directly on the returned object.</p> Source code in <code>src/streamlit_extras/stylable_container/__init__.py</code> <pre><code>@extra\ndef stylable_container(key: str, css_styles: str | List[str]) -&gt; \"DeltaGenerator\":\n    \"\"\"\n    Insert a container into your app which you can style using CSS.\n    This is useful to style specific elements in your app.\n\n    Args:\n        key (str): The key associated with this container. This needs to be unique since all styles will be\n            applied to the container with this key.\n        css_styles (str | List[str]): The CSS styles to apply to the container elements.\n            This can be a single CSS block or a list of CSS blocks.\n\n    Returns:\n        DeltaGenerator: A container object. Elements can be added to this container using either the 'with'\n            notation or by calling methods directly on the returned object.\n    \"\"\"\n    if isinstance(css_styles, str):\n        css_styles = [css_styles]\n\n    # Remove unneeded spacing that is added by the style markdown:\n    css_styles.append(\n        \"\"\"\n&gt; div:first-child {\n    margin-bottom: -1rem;\n}\n\"\"\"\n    )\n\n    style_text = \"\"\"\n&lt;style&gt;\n\"\"\"\n\n    for style in css_styles:\n        style_text += f\"\"\"\n\ndiv[data-testid=\"stVerticalBlock\"]:has(&gt; div.element-container &gt; div.stMarkdown &gt; div[data-testid=\"stMarkdownContainer\"] &gt; p &gt; span.{key}) {style}\n\n\"\"\"\n\n    style_text += f\"\"\"\n    &lt;/style&gt;\n\n&lt;span class=\"{key}\"&gt;&lt;/span&gt;\n\"\"\"\n\n    container = st.container()\n    container.markdown(style_text, unsafe_allow_html=True)\n    return container\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.stylable_container import stylable_container # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stylable_container/#examples","title":"Examples","text":""},{"location":"extras/stylable_container/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    with stylable_container(\n        key=\"green_button\",\n        css_styles=\"\"\"\n            button {\n                background-color: green;\n                color: white;\n                border-radius: 20px;\n            }\n            \"\"\",\n    ):\n        st.button(\"Green button\")\n\n    st.button(\"Normal button\")\n\n    with stylable_container(\n        key=\"container_with_border\",\n        css_styles=\"\"\"\n            {\n                border: 1px solid rgba(49, 51, 63, 0.2);\n                border-radius: 0.5rem;\n                padding: calc(1em - 1px)\n            }\n            \"\"\",\n    ):\n        st.markdown(\"This is a container with a border.\")\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/switch_page_button/","title":"\ud83d\uddb1\ufe0f\u00a0\u00a0Switch page function","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/switch_page_button/#summary","title":"Summary","text":"<p>Function to switch page programmatically in a MPA</p>"},{"location":"extras/switch_page_button/#functions","title":"Functions","text":""},{"location":"extras/switch_page_button/#switch_page","title":"<code>switch_page</code>","text":"<p>Switch page programmatically in a multipage app</p> <p>Parameters:</p> Name Type Description Default <code>page_name</code> <code>str</code> <p>Target page name</p> required Source code in <code>src/streamlit_extras/switch_page_button/__init__.py</code> <pre><code>@extra\ndef switch_page(page_name: str):\n    \"\"\"\n    Switch page programmatically in a multipage app\n\n    Args:\n        page_name (str): Target page name\n    \"\"\"\n    from streamlit.runtime.scriptrunner import RerunData, RerunException\n    from streamlit.source_util import get_pages\n\n    def standardize_name(name: str) -&gt; str:\n        return name.lower().replace(\"_\", \" \")\n\n    page_name = standardize_name(page_name)\n\n    pages = get_pages(\"streamlit_app.py\")  # OR whatever your main page is called\n\n    for page_hash, config in pages.items():\n        if standardize_name(config[\"page_name\"]) == page_name:\n            raise RerunException(\n                RerunData(\n                    page_script_hash=page_hash,\n                    page_name=page_name,\n                )\n            )\n\n    page_names = [standardize_name(config[\"page_name\"]) for config in pages.values()]\n\n    raise ValueError(f\"Could not find page {page_name}. Must be one of {page_names}\")\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.switch_page_button import switch_page # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/switch_page_button/#examples","title":"Examples","text":""},{"location":"extras/switch_page_button/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    want_to_contribute = st.button(\"I want to contribute!\")\n    if want_to_contribute:\n        switch_page(\"Contribute\")\n</code></pre>"},{"location":"extras/tags/","title":"\ud83d\udd16\u00a0\u00a0Tags","text":"<p>Submitted by Maggie Liu</p>"},{"location":"extras/tags/#summary","title":"Summary","text":"<p>Display tags like github issues!</p>"},{"location":"extras/tags/#functions","title":"Functions","text":""},{"location":"extras/tags/#tagger_component","title":"<code>tagger_component</code>","text":"<p>Displays tags next to your text.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to be tagged</p> required <code>tags</code> <code>list</code> <p>A list of tags to be displayed next to the content</p> required <code>color_name</code> <code>list[VALID_COLOR_NAMES] | VALID_COLOR_NAMES | None</code> <p>A list or a string that indicates the color of tags. Choose from lightblue, orange, bluegreen, blue, violet, red, green, yellow</p> <code>None</code> Source code in <code>src/streamlit_extras/tags/__init__.py</code> <pre><code>@extra\ndef tagger_component(\n    content: str,\n    tags: list[str],\n    color_name: list[VALID_COLOR_NAMES] | VALID_COLOR_NAMES | None = None,\n):\n    \"\"\"\n    Displays tags next to your text.\n\n    Args:\n        content (str): Content to be tagged\n        tags (list): A list of tags to be displayed next to the content\n        color_name: A list or a string that indicates the color of tags.\n            Choose from lightblue, orange, bluegreen, blue, violet, red, green, yellow\n    \"\"\"\n    if isinstance(color_name, str):\n        if color_name not in TAGGER_COLOR_PALETTE:\n            raise ValueError(\n                f\"color_name must contain a name from {TAGGER_COLOR_PALETTE.keys()} \"\n                f\"not {color_name}\"\n            )\n    elif isinstance(color_name, list):\n        for color in color_name:\n            if color not in TAGGER_COLOR_PALETTE:\n                raise ValueError(\n                    f\"color_name must contain a name from {TAGGER_COLOR_PALETTE.keys()}\"\n                    f\" not {color}\"\n                )\n            if len(color_name) != len(tags):\n                raise ValueError(\n                    f\"color_name must be the same length as tags. \"\n                    f\"len(color_name) = {len(color_name)}, len(tags) = {len(tags)}\"\n                )\n\n    tags_html = _get_html(content, tags, color_name)\n\n    st.write(tags_html, unsafe_allow_html=True)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.tags import tagger_component # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/tags/#examples","title":"Examples","text":""},{"location":"extras/tags/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    tagger_component(\"Here is a feature request\", [\"p2\", \"\ud83d\udea9triaged\", \"backlog\"])\n    tagger_component(\n        \"Here are colored tags\",\n        [\"turtle\", \"rabbit\", \"lion\"],\n        color_name=[\"blue\", \"orange\", \"lightblue\"],\n    )\n    tagger_component(\n        \"Annotate the feature\",\n        [\"hallucination\"],\n        color_name=[\"blue\"],\n    )\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"},{"location":"extras/toggle_switch/","title":"\ud83d\udd1b\u00a0\u00a0Toggle Switch","text":"<p>Submitted by Carlos D. Serrano</p>"},{"location":"extras/toggle_switch/#summary","title":"Summary","text":"<p>On/Off Toggle Switch with color customizations. Note     that this is now available as a native Streamlit command st.toggle.     Check out the docs!</p>"},{"location":"extras/toggle_switch/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/toggle_switch/#examples","title":"Examples","text":""},{"location":"extras/toggle_switch/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    st.write(\"## Toggle Switch\")\n    st_toggle_switch(\n        label=\"Enable Setting?\",\n        key=\"switch_1\",\n        default_value=False,\n        label_after=False,\n        inactive_color=\"#D3D3D3\",  # optional\n        active_color=\"#11567f\",  # optional\n        track_color=\"#29B5E8\",  # optional\n    )\n</code></pre>"},{"location":"extras/vertical_slider/","title":"\ud83c\udf9a\u00a0\u00a0Vertical Slider","text":"<p>Submitted by Carlos D. Serrano</p>"},{"location":"extras/vertical_slider/#summary","title":"Summary","text":"<p>Continuous Vertical Slider with color customizations</p>"},{"location":"extras/vertical_slider/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/vertical_slider/#examples","title":"Examples","text":""},{"location":"extras/vertical_slider/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    st.write(\"## Vertical Slider\")\n    vertical_slider(\n        key=\"slider\",\n        default_value=25,\n        step=1,\n        min_value=0,\n        max_value=100,\n        track_color=\"gray\",  # optional\n        thumb_color=\"blue\",  # optional\n        slider_color=\"red\",  # optional\n    )\n</code></pre>"},{"location":"extras/word_importances/","title":"\u2757\u00a0\u00a0Word importances","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/word_importances/#summary","title":"Summary","text":"<p>Highlight words based on their importances. Inspired from captum library.</p>"},{"location":"extras/word_importances/#functions","title":"Functions","text":""},{"location":"extras/word_importances/#format_word_importances","title":"<code>format_word_importances</code>","text":"<p>Adds a background color to each word based on its importance (float from -1 to 1)</p> <p>Parameters:</p> Name Type Description Default <code>words</code> <code>list</code> <p>List of words</p> required <code>importances</code> <code>list</code> <p>List of importances (scores from -1 to 1)</p> required <p>Returns:</p> Name Type Description <code>html</code> <code>str</code> <p>HTML string with formatted word</p> Source code in <code>src/streamlit_extras/word_importances/__init__.py</code> <pre><code>@extra\ndef format_word_importances(words: List[str], importances: List[float]) -&gt; str:\n    \"\"\"Adds a background color to each word based on its importance (float from -1 to 1)\n\n    Args:\n        words (list): List of words\n        importances (list): List of importances (scores from -1 to 1)\n\n    Returns:\n        html (str): HTML string with formatted word\n\n\n    \"\"\"\n    if importances is None or len(importances) == 0:\n        return \"&lt;td&gt;&lt;/td&gt;\"\n    assert len(words) == len(importances), \"Words and importances but be of same length\"\n\n    tags = [\"&lt;td&gt;\"]\n    for word, importance in zip(words, importances[: len(words)]):\n        color = _get_color(importance)\n        unwrapped_tag = (\n            '&lt;mark style=\"background-color: {color}; opacity:1.0;             '\n            '        line-height:1.75\"&gt;&lt;font color=\"black\"&gt; {word}            '\n            \"        &lt;/font&gt;&lt;/mark&gt;\".format(color=color, word=word)\n        )\n        tags.append(unwrapped_tag)\n    tags.append(\"&lt;/td&gt;\")\n    html = \"\".join(tags)\n\n    return html\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.word_importances import format_word_importances # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/word_importances/#examples","title":"Examples","text":""},{"location":"extras/word_importances/#example","title":"<code>example</code>","text":"<pre><code>def example():\n    text = (\n        \"Streamlit Extras is a library to help you discover, learn, share and\"\n        \" use Streamlit bits of code!\"\n    )\n    html = format_word_importances(\n        words=text.split(),\n        importances=(0.1, 0.2, 0, -1, 0.1, 0, 0, 0.2, 0.3, 0.8, 0.9, 0.6, 0.3, 0.1, 0, 0, 0),  # fmt: skip\n    )\n    st.write(html, unsafe_allow_html=True)\n</code></pre>  Output (beta) <p> Just trying stuff </p> <p>\ud83c\udf88 Powered by stlite</p>"}]}